{"version":3,"file":"upgrade-static.umd.js","sources":["../../../../packages/upgrade/static/public_api.ts","../../../../packages/upgrade/static/src/static/upgrade_module.ts","../../../../packages/upgrade/static/src/static/angular1_providers.ts","../../../../packages/upgrade/static/src/static/upgrade_component.ts","../../../../packages/upgrade/static/src/common/angular1.ts","../../../../packages/upgrade/static/src/common/version.ts","../../../../packages/upgrade/static/src/common/downgrade_injectable.ts","../../../../packages/upgrade/static/src/common/downgrade_component.ts","../../../../packages/upgrade/static/src/common/downgrade_component_adapter.ts","../../../../packages/upgrade/static/src/common/util.ts","../../../../packages/upgrade/static/src/common/component_info.ts","../../../../packages/upgrade/static/src/common/constants.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the upgrade/static package, allowing\n * Angular 1 and Angular 2+ to run side by side in the same application.\n */\nexport {downgradeComponent} from './src/common/downgrade_component';\nexport {downgradeInjectable} from './src/common/downgrade_injectable';\nexport {VERSION} from './src/common/version';\nexport {UpgradeComponent} from './src/static/upgrade_component';\nexport {UpgradeModule} from './src/static/upgrade_module';\n\n// This file only re-exports content of the `src` folder. Keep it that way.\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector, NgModule, NgZone, Testability, ÉµNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR as NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR} from '@angular/core';\n\nimport * as angular from '../common/angular1';\nimport {$$TESTABILITY, $DELEGATE, $INJECTOR, $PROVIDE, INJECTOR_KEY, UPGRADE_MODULE_NAME} from '../common/constants';\nimport {controllerKey} from '../common/util';\n\nimport {angular1Providers, setTempInjectorRef} from './angular1_providers';\n\n\n/**\n * @whatItDoes\n *\n * *Part of the [upgrade/static](/docs/ts/latest/api/#!?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * Allows AngularJS and Angular components to be used together inside a hybrid upgrade\n * application, which supports AoT compilation.\n *\n * Specifically, the classes and functions in the `upgrade/static` module allow the following:\n * 1. Creation of an Angular directive that wraps and exposes an AngularJS component so\n *    that it can be used in an Angular template. See {@link UpgradeComponent}.\n * 2. Creation of an AngularJS directive that wraps and exposes an Angular component so\n *    that it can be used in an AngularJS template. See {@link downgradeComponent}.\n * 3. Creation of an Angular root injector provider that wraps and exposes an AngularJS\n *    service so that it can be injected into an Angular context. See\n *    {@link UpgradeModule#upgrading-an-angular-1-service Upgrading an AngularJS service} below.\n * 4. Creation of an AngularJS service that wraps and exposes an Angular injectable\n *    so that it can be injected into an AngularJS context. See {@link downgradeInjectable}.\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application. See the\n *    {@link UpgradeModule#example example} below.\n *\n * ## Mental Model\n *\n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n *\n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS directives always execute inside the AngularJS framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular components always execute inside the Angular framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS component can be \"upgraded\"\" to an Angular component. This is achieved by\n *    defining an Angular directive, which bootstraps the AngularJS component at its location\n *    in the DOM. See {@link UpgradeComponent}.\n * 6. An Angular component can be \"downgraded\"\" to an AngularJS component. This is achieved by\n *    defining an AngularJS directive, which bootstraps the Angular component at its location\n *    in the DOM. See {@link downgradeComponent}.\n * 7. Whenever an \"upgraded\"/\"downgraded\" component is instantiated the host element is owned by\n *    the framework doing the instantiation. The other framework then instantiates and owns the\n *    view for that component.\n *    a. This implies that the component bindings will always follow the semantics of the\n *       instantiation framework.\n *    b. The DOM attributes are parsed by the framework that owns the current template. So\n * attributes\n *       in AngularJS templates must use kebab-case, while AngularJS templates must use camelCase.\n *    c. However the template binding syntax will always use the Angular style, e.g. square\n *       brackets (`[...]`) for property binding.\n * 8. AngularJS is always bootstrapped first and owns the root component.\n * 9. The new application is running in an Angular zone, and therefore it no longer needs calls\n * to\n *    `$apply()`.\n *\n * @howToUse\n *\n * `import {UpgradeModule} from '@angular/upgrade/static';`\n *\n * ## Example\n * Import the {@link UpgradeModule} into your top level {@link NgModule Angular `NgModule`}.\n *\n * {@example upgrade/static/ts/module.ts region='ng2-module'}\n *\n * Then bootstrap the hybrid upgrade app's module, get hold of the {@link UpgradeModule} instance\n * and use it to bootstrap the top level [AngularJS\n * module](https://docs.angularjs.org/api/ng/type/angular.Module).\n *\n * {@example upgrade/static/ts/module.ts region='bootstrap'}\n *\n *\n * ## Upgrading an AngularJS service\n *\n * There is no specific API for upgrading an AngularJS service. Instead you should just follow the\n * following recipe:\n *\n * Let's say you have an AngularJS service:\n *\n * {@example upgrade/static/ts/module.ts region=\"ng1-title-case-service\"}\n *\n * Then you should define an Angular provider to be included in your {@link NgModule} `providers`\n * property.\n *\n * {@example upgrade/static/ts/module.ts region=\"upgrade-ng1-service\"}\n *\n * Then you can use the \"upgraded\" AngularJS service by injecting it into an Angular component\n * or service.\n *\n * {@example upgrade/static/ts/module.ts region=\"use-ng1-upgraded-service\"}\n *\n * @description\n *\n * This class is an `NgModule`, which you import to provide AngularJS core services,\n * and has an instance method used to bootstrap the hybrid upgrade application.\n *\n * ## Core AngularJS services\n * Importing this {@link NgModule} will add providers for the core\n * [AngularJS services](https://docs.angularjs.org/api/ng/service) to the root injector.\n *\n * ## Bootstrap\n * The runtime instance of this class contains a {@link UpgradeModule#bootstrap `bootstrap()`}\n * method, which you use to bootstrap the top level AngularJS module onto an element in the\n * DOM for the hybrid upgrade app.\n *\n * It also contains properties to access the {@link UpgradeModule#injector root injector}, the\n * bootstrap {@link NgZone} and the\n * [AngularJS $injector](https://docs.angularjs.org/api/auto/service/$injector).\n *\n * @experimental\n */\n\nexport class UpgradeModule {\n  /**\n   * The AngularJS `$injector` for the upgrade application.\n   */\n  public $injector: any /*angular.IInjectorService*/;\n  /** The Angular Injector **/\n  public injector: Injector;\n\n  constructor(\n      /** The root {@link Injector} for the upgrade application. */\n      injector: Injector,\n      /** The bootstrap zone for the upgrade application */\n      public ngZone: NgZone) {\n    this.injector = new NgAdapterInjector(injector);\n  }\n\n  /**\n   * Bootstrap an AngularJS application from this NgModule\n   * @param element the element on which to bootstrap the AngularJS application\n   * @param [modules] the AngularJS modules to bootstrap for this application\n   * @param [config] optional extra AngularJS bootstrap configuration\n   */\n  bootstrap(\n      element: Element, modules: string[] = [], config?: any /*angular.IAngularBootstrapConfig*/) {\n    const INIT_MODULE_NAME = UPGRADE_MODULE_NAME + '.init';\n\n    // Create an ng1 module to bootstrap\n    const initModule =\n        angular\n            .module(INIT_MODULE_NAME, [])\n\n            .value(INJECTOR_KEY, this.injector)\n\n            .config([\n              $PROVIDE, $INJECTOR,\n              ($provide: angular.IProvideService, $injector: angular.IInjectorService) => {\n                if ($injector.has($$TESTABILITY)) {\n                  $provide.decorator($$TESTABILITY, [\n                    $DELEGATE,\n                    (testabilityDelegate: angular.ITestabilityService) => {\n                      const originalWhenStable: Function = testabilityDelegate.whenStable;\n                      const injector = this.injector;\n                      // Cannot use arrow function below because we need the context\n                      const newWhenStable = function(callback: Function) {\n                        originalWhenStable.call(testabilityDelegate, function() {\n                          const ng2Testability: Testability = injector.get(Testability);\n                          if (ng2Testability.isStable()) {\n                            callback();\n                          } else {\n                            ng2Testability.whenStable(\n                                newWhenStable.bind(testabilityDelegate, callback));\n                          }\n                        });\n                      };\n\n                      testabilityDelegate.whenStable = newWhenStable;\n                      return testabilityDelegate;\n                    }\n                  ]);\n                }\n              }\n            ])\n\n            .run([\n              $INJECTOR,\n              ($injector: angular.IInjectorService) => {\n                this.$injector = $injector;\n\n                // Initialize the ng1 $injector provider\n                setTempInjectorRef($injector);\n                this.injector.get($INJECTOR);\n\n                // Put the injector on the DOM, so that it can be \"required\"\n                angular.element(element).data(controllerKey(INJECTOR_KEY), this.injector);\n\n                // Wire up the ng1 rootScope to run a digest cycle whenever the zone settles\n                // We need to do this in the next tick so that we don't prevent the bootup\n                // stabilizing\n                setTimeout(() => {\n                  const $rootScope = $injector.get('$rootScope');\n                  const subscription =\n                      this.ngZone.onMicrotaskEmpty.subscribe(() => $rootScope.$digest());\n                  $rootScope.$on('$destroy', () => { subscription.unsubscribe(); });\n                }, 0);\n              }\n            ]);\n\n    const upgradeModule = angular.module(UPGRADE_MODULE_NAME, [INIT_MODULE_NAME].concat(modules));\n\n    // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n    const windowAngular = (window as any /** TODO #???? */)['angular'];\n    windowAngular.resumeBootstrap = undefined;\n\n    // Bootstrap the AngularJS application inside our zone\n    this.ngZone.run(() => { angular.bootstrap(element, [upgradeModule.name], config); });\n\n    // Patch resumeBootstrap() to run inside the ngZone\n    if (windowAngular.resumeBootstrap) {\n      const originalResumeBootstrap: () => void = windowAngular.resumeBootstrap;\n      const ngZone = this.ngZone;\n      windowAngular.resumeBootstrap = function() {\n        let args = arguments;\n        windowAngular.resumeBootstrap = originalResumeBootstrap;\n        ngZone.run(() => { windowAngular.resumeBootstrap.apply(this, args); });\n      };\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{providers: [angular1Providers]}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Injector, },\n{type: NgZone, },\n];\n}\n\nclass NgAdapterInjector implements Injector {\n  constructor(private modInjector: Injector) {}\n\n  // When Angular locate a service in the component injector tree, the not found value is set to\n  // `NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR`. In such a case we should not walk up to the module\n  // injector.\n  // AngularJS only supports a single tree and should always check the module injector.\n  get(token: any, notFoundValue?: any): any {\n    if (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n      return notFoundValue;\n    }\n\n    return this.modInjector.get(token, notFoundValue);\n  }\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as angular from '../common/angular1';\n\n// We have to do a little dance to get the ng1 injector into the module injector.\n// We store the ng1 injector so that the provider in the module injector can access it\n// Then we \"get\" the ng1 injector from the module injector, which triggers the provider to read\n// the stored injector and release the reference to it.\nlet tempInjectorRef: angular.IInjectorService;\nexport function setTempInjectorRef(injector: angular.IInjectorService) {\n  tempInjectorRef = injector;\n}\nexport function injectorFactory() {\n  const injector: angular.IInjectorService = tempInjectorRef;\n  tempInjectorRef = null;  // clear the value to prevent memory leaks\n  return injector;\n}\n\nexport function rootScopeFactory(i: angular.IInjectorService) {\n  return i.get('$rootScope');\n}\n\nexport function compileFactory(i: angular.IInjectorService) {\n  return i.get('$compile');\n}\n\nexport function parseFactory(i: angular.IInjectorService) {\n  return i.get('$parse');\n}\n\nexport const angular1Providers = [\n  // We must use exported named functions for the ng2 factories to keep the compiler happy:\n  // > Metadata collected contains an error that will be reported at runtime:\n  // >   Function calls are not supported.\n  // >   Consider replacing the function or lambda with a reference to an exported function\n  {provide: '$injector', useFactory: injectorFactory},\n  {provide: '$rootScope', useFactory: rootScopeFactory, deps: ['$injector']},\n  {provide: '$compile', useFactory: compileFactory, deps: ['$injector']},\n  {provide: '$parse', useFactory: parseFactory, deps: ['$injector']}\n];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DoCheck, ElementRef, EventEmitter, Injector, OnChanges, OnDestroy, OnInit, SimpleChanges, ÉµlooseIdentical as looseIdentical} from '@angular/core';\nimport * as angular from '../common/angular1';\nimport {$COMPILE, $CONTROLLER, $HTTP_BACKEND, $INJECTOR, $SCOPE, $TEMPLATE_CACHE} from '../common/constants';\nimport {controllerKey} from '../common/util';\n\nconst REQUIRE_PREFIX_RE = /^(\\^\\^?)?(\\?)?(\\^\\^?)?/;\nconst NOT_SUPPORTED: any = 'NOT_SUPPORTED';\nconst INITIAL_VALUE = {\n  __UNINITIALIZED__: true\n};\n\nclass Bindings {\n  twoWayBoundProperties: string[] = [];\n  twoWayBoundLastValues: any[] = [];\n\n  expressionBoundProperties: string[] = [];\n\n  propertyToOutputMap: {[propName: string]: string} = {};\n}\n\ninterface IBindingDestination {\n  [key: string]: any;\n  $onChanges?: (changes: SimpleChanges) => void;\n}\n\ninterface IControllerInstance extends IBindingDestination {\n  $doCheck?: () => void;\n  $onDestroy?: () => void;\n  $onInit?: () => void;\n  $postLink?: () => void;\n}\n\ntype LifecycleHook = '$doCheck' | '$onChanges' | '$onDestroy' | '$onInit' | '$postLink';\n\n/**\n * @whatItDoes\n *\n * *Part of the [upgrade/static](/docs/ts/latest/api/#!?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * Allows an AngularJS component to be used from Angular.\n *\n * @howToUse\n *\n * Let's assume that you have an AngularJS component called `ng1Hero` that needs\n * to be made available in Angular templates.\n *\n * {@example upgrade/static/ts/module.ts region=\"ng1-hero\"}\n *\n * We must create a {@link Directive} that will make this AngularJS component\n * available inside Angular templates.\n *\n * {@example upgrade/static/ts/module.ts region=\"ng1-hero-wrapper\"}\n *\n * In this example you can see that we must derive from the {@link UpgradeComponent}\n * base class but also provide an {@link Directive `@Directive`} decorator. This is\n * because the AoT compiler requires that this information is statically available at\n * compile time.\n *\n * Note that we must do the following:\n * * specify the directive's selector (`ng1-hero`)\n * * specify all inputs and outputs that the AngularJS component expects\n * * derive from `UpgradeComponent`\n * * call the base class from the constructor, passing\n *   * the AngularJS name of the component (`ng1Hero`)\n *   * the {@link ElementRef} and {@link Injector} for the component wrapper\n *\n * @description\n *\n * A helper class that should be used as a base class for creating Angular directives\n * that wrap AngularJS components that need to be \"upgraded\".\n *\n * @experimental\n */\nexport class UpgradeComponent implements OnInit, OnChanges, DoCheck, OnDestroy {\n  private $injector: angular.IInjectorService;\n  private $compile: angular.ICompileService;\n  private $templateCache: angular.ITemplateCacheService;\n  private $httpBackend: angular.IHttpBackendService;\n  private $controller: angular.IControllerService;\n\n  private element: Element;\n  private $element: angular.IAugmentedJQuery;\n  private $componentScope: angular.IScope;\n\n  private directive: angular.IDirective;\n  private bindings: Bindings;\n\n  private controllerInstance: IControllerInstance;\n  private bindingDestination: IBindingDestination;\n\n  // We will be instantiating the controller in the `ngOnInit` hook, when the first `ngOnChanges`\n  // will have been already triggered. We store the `SimpleChanges` and \"play them back\" later.\n  private pendingChanges: SimpleChanges;\n\n  private unregisterDoCheckWatcher: Function;\n\n  /**\n   * Create a new `UpgradeComponent` instance. You should not normally need to do this.\n   * Instead you should derive a new class from this one and call the super constructor\n   * from the base class.\n   *\n   * {@example upgrade/static/ts/module.ts region=\"ng1-hero-wrapper\" }\n   *\n   * * The `name` parameter should be the name of the AngularJS directive.\n   * * The `elementRef` and `injector` parameters should be acquired from Angular by dependency\n   *   injection into the base class constructor.\n   *\n   * Note that we must manually implement lifecycle hooks that call through to the super class.\n   * This is because, at the moment, the AoT compiler is not able to tell that the\n   * `UpgradeComponent`\n   * already implements them and so does not wire up calls to them at runtime.\n   */\n  constructor(private name: string, private elementRef: ElementRef, private injector: Injector) {\n    this.$injector = injector.get($INJECTOR);\n    this.$compile = this.$injector.get($COMPILE);\n    this.$templateCache = this.$injector.get($TEMPLATE_CACHE);\n    this.$httpBackend = this.$injector.get($HTTP_BACKEND);\n    this.$controller = this.$injector.get($CONTROLLER);\n\n    this.element = elementRef.nativeElement;\n    this.$element = angular.element(this.element);\n\n    this.directive = this.getDirective(name);\n    this.bindings = this.initializeBindings(this.directive);\n\n    // We ask for the AngularJS scope from the Angular injector, since\n    // we will put the new component scope onto the new injector for each component\n    const $parentScope = injector.get($SCOPE);\n    // QUESTION 1: Should we create an isolated scope if the scope is only true?\n    // QUESTION 2: Should we make the scope accessible through `$element.scope()/isolateScope()`?\n    this.$componentScope = $parentScope.$new(!!this.directive.scope);\n\n    this.initializeOutputs();\n  }\n\n  ngOnInit() {\n    // Collect contents, insert and compile template\n    const contentChildNodes = this.extractChildNodes(this.element);\n    const linkFn = this.compileTemplate(this.directive);\n\n    // Instantiate controller\n    const controllerType = this.directive.controller;\n    const bindToController = this.directive.bindToController;\n    if (controllerType) {\n      this.controllerInstance = this.buildController(\n          controllerType, this.$componentScope, this.$element, this.directive.controllerAs);\n    } else if (bindToController) {\n      throw new Error(\n          `Upgraded directive '${this.directive.name}' specifies 'bindToController' but no controller.`);\n    }\n\n    // Set up outputs\n    this.bindingDestination = bindToController ? this.controllerInstance : this.$componentScope;\n    this.bindOutputs();\n\n    // Require other controllers\n    const directiveRequire = this.getDirectiveRequire(this.directive);\n    const requiredControllers =\n        this.resolveRequire(this.directive.name, this.$element, directiveRequire);\n\n    if (this.directive.bindToController && isMap(directiveRequire)) {\n      const requiredControllersMap = requiredControllers as{[key: string]: IControllerInstance};\n      Object.keys(requiredControllersMap).forEach(key => {\n        this.controllerInstance[key] = requiredControllersMap[key];\n      });\n    }\n\n    // Hook: $onChanges\n    if (this.pendingChanges) {\n      this.forwardChanges(this.pendingChanges);\n      this.pendingChanges = null;\n    }\n\n    // Hook: $onInit\n    if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {\n      this.controllerInstance.$onInit();\n    }\n\n    // Hook: $doCheck\n    if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {\n      const callDoCheck = () => this.controllerInstance.$doCheck();\n\n      this.unregisterDoCheckWatcher = this.$componentScope.$parent.$watch(callDoCheck);\n      callDoCheck();\n    }\n\n    // Linking\n    const link = this.directive.link;\n    const preLink = (typeof link == 'object') && (link as angular.IDirectivePrePost).pre;\n    const postLink = (typeof link == 'object') ? (link as angular.IDirectivePrePost).post : link;\n    const attrs: angular.IAttributes = NOT_SUPPORTED;\n    const transcludeFn: angular.ITranscludeFunction = NOT_SUPPORTED;\n    if (preLink) {\n      preLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n    }\n\n    const attachChildNodes: angular.ILinkFn = (scope, cloneAttach) =>\n        cloneAttach(contentChildNodes);\n    linkFn(this.$componentScope, null, {parentBoundTranscludeFn: attachChildNodes});\n\n    if (postLink) {\n      postLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n    }\n\n    // Hook: $postLink\n    if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {\n      this.controllerInstance.$postLink();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.bindingDestination) {\n      this.pendingChanges = changes;\n    } else {\n      this.forwardChanges(changes);\n    }\n  }\n\n  ngDoCheck() {\n    const twoWayBoundProperties = this.bindings.twoWayBoundProperties;\n    const twoWayBoundLastValues = this.bindings.twoWayBoundLastValues;\n    const propertyToOutputMap = this.bindings.propertyToOutputMap;\n\n    twoWayBoundProperties.forEach((propName, idx) => {\n      const newValue = this.bindingDestination[propName];\n      const oldValue = twoWayBoundLastValues[idx];\n\n      if (!looseIdentical(newValue, oldValue)) {\n        const outputName = propertyToOutputMap[propName];\n        const eventEmitter: EventEmitter<any> = (this as any)[outputName];\n\n        eventEmitter.emit(newValue);\n        twoWayBoundLastValues[idx] = newValue;\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    if (isFunction(this.unregisterDoCheckWatcher)) {\n      this.unregisterDoCheckWatcher();\n    }\n    if (this.controllerInstance && isFunction(this.controllerInstance.$onDestroy)) {\n      this.controllerInstance.$onDestroy();\n    }\n    this.$componentScope.$destroy();\n  }\n\n  private getDirective(name: string): angular.IDirective {\n    const directives: angular.IDirective[] = this.$injector.get(name + 'Directive');\n    if (directives.length > 1) {\n      throw new Error('Only support single directive definition for: ' + this.name);\n    }\n    const directive = directives[0];\n    if (directive.replace) this.notSupported('replace');\n    if (directive.terminal) this.notSupported('terminal');\n    if (directive.compile) this.notSupported('compile');\n    const link = directive.link;\n    // QUESTION: why not support link.post?\n    if (typeof link == 'object') {\n      if ((<angular.IDirectivePrePost>link).post) this.notSupported('link.post');\n    }\n    return directive;\n  }\n\n  private getDirectiveRequire(directive: angular.IDirective): angular.DirectiveRequireProperty {\n    const require = directive.require || (directive.controller && directive.name);\n\n    if (isMap(require)) {\n      Object.keys(require).forEach(key => {\n        const value = require[key];\n        const match = value.match(REQUIRE_PREFIX_RE);\n        const name = value.substring(match[0].length);\n\n        if (!name) {\n          require[key] = match[0] + key;\n        }\n      });\n    }\n\n    return require;\n  }\n\n  private initializeBindings(directive: angular.IDirective) {\n    const btcIsObject = typeof directive.bindToController === 'object';\n    if (btcIsObject && Object.keys(directive.scope).length) {\n      throw new Error(\n          `Binding definitions on scope and controller at the same time is not supported.`);\n    }\n\n    const context = (btcIsObject) ? directive.bindToController : directive.scope;\n    const bindings = new Bindings();\n\n    if (typeof context == 'object') {\n      Object.keys(context).forEach(propName => {\n        const definition = context[propName];\n        const bindingType = definition.charAt(0);\n\n        // QUESTION: What about `=*`? Ignore? Throw? Support?\n\n        switch (bindingType) {\n          case '@':\n          case '<':\n            // We don't need to do anything special. They will be defined as inputs on the\n            // upgraded component facade and the change propagation will be handled by\n            // `ngOnChanges()`.\n            break;\n          case '=':\n            bindings.twoWayBoundProperties.push(propName);\n            bindings.twoWayBoundLastValues.push(INITIAL_VALUE);\n            bindings.propertyToOutputMap[propName] = propName + 'Change';\n            break;\n          case '&':\n            bindings.expressionBoundProperties.push(propName);\n            bindings.propertyToOutputMap[propName] = propName;\n            break;\n          default:\n            let json = JSON.stringify(context);\n            throw new Error(\n                `Unexpected mapping '${bindingType}' in '${json}' in '${this.name}' directive.`);\n        }\n      });\n    }\n\n    return bindings;\n  }\n\n  private extractChildNodes(element: Element): Node[] {\n    const childNodes: Node[] = [];\n    let childNode: Node;\n\n    while (childNode = element.firstChild) {\n      element.removeChild(childNode);\n      childNodes.push(childNode);\n    }\n\n    return childNodes;\n  }\n\n  private compileTemplate(directive: angular.IDirective): angular.ILinkFn {\n    if (this.directive.template !== undefined) {\n      return this.compileHtml(getOrCall(this.directive.template));\n    } else if (this.directive.templateUrl) {\n      const url = getOrCall(this.directive.templateUrl);\n      const html = this.$templateCache.get(url) as string;\n      if (html !== undefined) {\n        return this.compileHtml(html);\n      } else {\n        throw new Error('loading directive templates asynchronously is not supported');\n        // return new Promise((resolve, reject) => {\n        //   this.$httpBackend('GET', url, null, (status: number, response: string) => {\n        //     if (status == 200) {\n        //       resolve(this.compileHtml(this.$templateCache.put(url, response)));\n        //     } else {\n        //       reject(`GET component template from '${url}' returned '${status}: ${response}'`);\n        //     }\n        //   });\n        // });\n      }\n    } else {\n      throw new Error(`Directive '${this.name}' is not a component, it is missing template.`);\n    }\n  }\n\n  private buildController(\n      controllerType: angular.IController, $scope: angular.IScope,\n      $element: angular.IAugmentedJQuery, controllerAs: string) {\n    // TODO: Document that we do not pre-assign bindings on the controller instance\n    // Quoted properties below so that this code can be optimized with Closure Compiler.\n    const locals = {'$scope': $scope, '$element': $element};\n    const controller = this.$controller(controllerType, locals, null, controllerAs);\n    $element.data(controllerKey(this.directive.name), controller);\n    return controller;\n  }\n\n  private resolveRequire(\n      directiveName: string, $element: angular.IAugmentedJQuery,\n      require: angular.DirectiveRequireProperty): angular.SingleOrListOrMap<IControllerInstance> {\n    if (!require) {\n      return null;\n    } else if (Array.isArray(require)) {\n      return require.map(req => this.resolveRequire(directiveName, $element, req));\n    } else if (typeof require === 'object') {\n      const value: {[key: string]: IControllerInstance} = {};\n\n      Object.keys(require).forEach(\n          key => value[key] = this.resolveRequire(directiveName, $element, require[key]));\n\n      return value;\n    } else if (typeof require === 'string') {\n      const match = require.match(REQUIRE_PREFIX_RE);\n      const inheritType = match[1] || match[3];\n\n      const name = require.substring(match[0].length);\n      const isOptional = !!match[2];\n      const searchParents = !!inheritType;\n      const startOnParent = inheritType === '^^';\n\n      const ctrlKey = controllerKey(name);\n\n      if (startOnParent) {\n        $element = $element.parent();\n      }\n\n      const value = searchParents ? $element.inheritedData(ctrlKey) : $element.data(ctrlKey);\n\n      if (!value && !isOptional) {\n        throw new Error(\n            `Unable to find required '${require}' in upgraded directive '${directiveName}'.`);\n      }\n\n      return value;\n    } else {\n      throw new Error(\n          `Unrecognized require syntax on upgraded directive '${directiveName}': ${require}`);\n    }\n  }\n\n  private initializeOutputs() {\n    // Initialize the outputs for `=` and `&` bindings\n    this.bindings.twoWayBoundProperties.concat(this.bindings.expressionBoundProperties)\n        .forEach(propName => {\n          const outputName = this.bindings.propertyToOutputMap[propName];\n          (this as any)[outputName] = new EventEmitter();\n        });\n  }\n\n  private bindOutputs() {\n    // Bind `&` bindings to the corresponding outputs\n    this.bindings.expressionBoundProperties.forEach(propName => {\n      const outputName = this.bindings.propertyToOutputMap[propName];\n      const emitter = (this as any)[outputName];\n\n      this.bindingDestination[propName] = (value: any) => emitter.emit(value);\n    });\n  }\n\n  private forwardChanges(changes: SimpleChanges) {\n    // Forward input changes to `bindingDestination`\n    Object.keys(changes).forEach(\n        propName => this.bindingDestination[propName] = changes[propName].currentValue);\n\n    if (isFunction(this.bindingDestination.$onChanges)) {\n      this.bindingDestination.$onChanges(changes);\n    }\n  }\n\n  private notSupported(feature: string) {\n    throw new Error(\n        `Upgraded directive '${this.name}' contains unsupported feature: '${feature}'.`);\n  }\n\n  private compileHtml(html: string): angular.ILinkFn {\n    this.element.innerHTML = html;\n    return this.$compile(this.element.childNodes);\n  }\n}\n\n\nfunction getOrCall<T>(property: Function | T): T {\n  return isFunction(property) ? property() : property;\n}\n\nfunction isFunction(value: any): value is Function {\n  return typeof value === 'function';\n}\n\n// NOTE: Only works for `typeof T !== 'object'`.\nfunction isMap<T>(value: angular.SingleOrListOrMap<T>): value is {[key: string]: T} {\n  return value && !Array.isArray(value) && typeof value === 'object';\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport type Ng1Token = string;\n\nexport type Ng1Expression = string | Function;\n\nexport interface IAnnotatedFunction extends Function { $inject?: Ng1Token[]; }\n\nexport type IInjectable = (Ng1Token | Function)[] | IAnnotatedFunction;\n\nexport type SingleOrListOrMap<T> = T | T[] | {[key: string]: T};\n\nexport interface IModule {\n  name: string;\n  requires: (string|IInjectable)[];\n  config(fn: IInjectable): IModule;\n  directive(selector: string, factory: IInjectable): IModule;\n  component(selector: string, component: IComponent): IModule;\n  controller(name: string, type: IInjectable): IModule;\n  factory(key: Ng1Token, factoryFn: IInjectable): IModule;\n  value(key: Ng1Token, value: any): IModule;\n  constant(token: Ng1Token, value: any): IModule;\n  run(a: IInjectable): IModule;\n}\nexport interface ICompileService {\n  (element: Element|NodeList|Node[]|string, transclude?: Function): ILinkFn;\n}\nexport interface ILinkFn {\n  (scope: IScope, cloneAttachFn?: ICloneAttachFunction, options?: ILinkFnOptions): IAugmentedJQuery;\n}\nexport interface ILinkFnOptions {\n  parentBoundTranscludeFn?: Function;\n  transcludeControllers?: {[key: string]: any};\n  futureParentElement?: Node;\n}\nexport interface IRootScopeService {\n  $new(isolate?: boolean): IScope;\n  $id: string;\n  $parent: IScope;\n  $root: IScope;\n  $watch(exp: Ng1Expression, fn?: (a1?: any, a2?: any) => void): Function;\n  $on(event: string, fn?: (event?: any, ...args: any[]) => void): Function;\n  $destroy(): any;\n  $apply(exp?: Ng1Expression): any;\n  $digest(): any;\n  $evalAsync(): any;\n  $on(event: string, fn?: (event?: any, ...args: any[]) => void): Function;\n  $$childTail: IScope;\n  $$childHead: IScope;\n  $$nextSibling: IScope;\n  [key: string]: any;\n}\nexport interface IScope extends IRootScopeService {}\n\nexport interface IAngularBootstrapConfig { strictDi?: boolean; }\nexport interface IDirective {\n  compile?: IDirectiveCompileFn;\n  controller?: IController;\n  controllerAs?: string;\n  bindToController?: boolean|{[key: string]: string};\n  link?: IDirectiveLinkFn|IDirectivePrePost;\n  name?: string;\n  priority?: number;\n  replace?: boolean;\n  require?: DirectiveRequireProperty;\n  restrict?: string;\n  scope?: boolean|{[key: string]: string};\n  template?: string|Function;\n  templateUrl?: string|Function;\n  templateNamespace?: string;\n  terminal?: boolean;\n  transclude?: boolean|'element'|{[key: string]: string};\n}\nexport type DirectiveRequireProperty = SingleOrListOrMap<string>;\nexport interface IDirectiveCompileFn {\n  (templateElement: IAugmentedJQuery, templateAttributes: IAttributes,\n   transclude: ITranscludeFunction): IDirectivePrePost;\n}\nexport interface IDirectivePrePost {\n  pre?: IDirectiveLinkFn;\n  post?: IDirectiveLinkFn;\n}\nexport interface IDirectiveLinkFn {\n  (scope: IScope, instanceElement: IAugmentedJQuery, instanceAttributes: IAttributes,\n   controller: any, transclude: ITranscludeFunction): void;\n}\nexport interface IComponent {\n  bindings?: {[key: string]: string};\n  controller?: string|IInjectable;\n  controllerAs?: string;\n  require?: DirectiveRequireProperty;\n  template?: string|Function;\n  templateUrl?: string|Function;\n  transclude?: boolean;\n}\nexport interface IAttributes { $observe(attr: string, fn: (v: string) => void): void; }\nexport interface ITranscludeFunction {\n  // If the scope is provided, then the cloneAttachFn must be as well.\n  (scope: IScope, cloneAttachFn: ICloneAttachFunction): IAugmentedJQuery;\n  // If one argument is provided, then it's assumed to be the cloneAttachFn.\n  (cloneAttachFn?: ICloneAttachFunction): IAugmentedJQuery;\n}\nexport interface ICloneAttachFunction {\n  // Let's hint but not force cloneAttachFn's signature\n  (clonedElement?: IAugmentedJQuery, scope?: IScope): any;\n}\nexport type IAugmentedJQuery = Node[] & {\n  bind?: (name: string, fn: () => void) => void;\n  data?: (name: string, value?: any) => any;\n  text?: () => string;\n  inheritedData?: (name: string, value?: any) => any;\n  contents?: () => IAugmentedJQuery;\n  parent?: () => IAugmentedJQuery;\n  empty?: () => void;\n  append?: (content: IAugmentedJQuery | string) => IAugmentedJQuery;\n  controller?: (name: string) => any;\n  isolateScope?: () => IScope;\n  injector?: () => IInjectorService;\n};\nexport interface IProvider { $get: IInjectable; }\nexport interface IProvideService {\n  provider(token: Ng1Token, provider: IProvider): IProvider;\n  factory(token: Ng1Token, factory: IInjectable): IProvider;\n  service(token: Ng1Token, type: IInjectable): IProvider;\n  value(token: Ng1Token, value: any): IProvider;\n  constant(token: Ng1Token, value: any): void;\n  decorator(token: Ng1Token, factory: IInjectable): void;\n}\nexport interface IParseService { (expression: string): ICompiledExpression; }\nexport interface ICompiledExpression { assign(context: any, value: any): any; }\nexport interface IHttpBackendService {\n  (method: string, url: string, post?: any, callback?: Function, headers?: any, timeout?: number,\n   withCredentials?: boolean): void;\n}\nexport interface ICacheObject {\n  put<T>(key: string, value?: T): T;\n  get(key: string): any;\n}\nexport interface ITemplateCacheService extends ICacheObject {}\nexport interface ITemplateRequestService {\n  (template: string|any /* TrustedResourceUrl */, ignoreRequestError?: boolean): Promise<string>;\n  totalPendingRequests: number;\n}\nexport type IController = string | IInjectable;\nexport interface IControllerService {\n  (controllerConstructor: IController, locals?: any, later?: any, ident?: any): any;\n  (controllerName: string, locals?: any): any;\n}\n\nexport interface IInjectorService {\n  get(key: string): any;\n  has(key: string): boolean;\n}\n\nexport interface ITestabilityService {\n  findBindings(element: Element, expression: string, opt_exactMatch?: boolean): Element[];\n  findModels(element: Element, expression: string, opt_exactMatch?: boolean): Element[];\n  getLocation(): string;\n  setLocation(url: string): void;\n  whenStable(callback: Function): void;\n}\n\nexport interface INgModelController {\n  $render(): void;\n  $isEmpty(value: any): boolean;\n  $setValidity(validationErrorKey: string, isValid: boolean): void;\n  $setPristine(): void;\n  $setDirty(): void;\n  $setUntouched(): void;\n  $setTouched(): void;\n  $rollbackViewValue(): void;\n  $validate(): void;\n  $commitViewValue(): void;\n  $setViewValue(value: any, trigger: string): void;\n\n  $viewValue: any;\n  $modelValue: any;\n  $parsers: Function[];\n  $formatters: Function[];\n  $validators: {[key: string]: Function};\n  $asyncValidators: {[key: string]: Function};\n  $viewChangeListeners: Function[];\n  $error: Object;\n  $pending: Object;\n  $untouched: boolean;\n  $touched: boolean;\n  $pristine: boolean;\n  $dirty: boolean;\n  $valid: boolean;\n  $invalid: boolean;\n  $name: string;\n}\n\nfunction noNg() {\n  throw new Error('AngularJS v1.x is not loaded!');\n}\n\nlet angular: {\n  bootstrap: (e: Element, modules: (string | IInjectable)[], config: IAngularBootstrapConfig) =>\n                 void,\n  module: (prefix: string, dependencies?: string[]) => IModule,\n  element: (e: Element | string) => IAugmentedJQuery,\n  version: {major: number}, resumeBootstrap?: () => void,\n  getTestability: (e: Element) => ITestabilityService\n} = <any>{\n  bootstrap: noNg,\n  module: noNg,\n  element: noNg,\n  version: noNg,\n  resumeBootstrap: noNg,\n  getTestability: noNg\n};\n\n\ntry {\n  if (window.hasOwnProperty('angular')) {\n    angular = (<any>window).angular;\n  }\n} catch (e) {\n  // ignore in CJS mode.\n}\n\nexport const bootstrap = angular.bootstrap;\nexport const module = angular.module;\nexport const element = angular.element;\nexport const version = angular.version;\nexport const resumeBootstrap = angular.resumeBootstrap;\nexport const getTestability = angular.getTestability;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\nimport {Version} from '@angular/core';\n/**\n * @stable\n */\nexport const VERSION = new Version('4.0.1');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\nimport {INJECTOR_KEY} from './constants';\n\n/**\n * @whatItDoes\n *\n * *Part of the [upgrade/static](/docs/ts/latest/api/#!?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * Allow an Angular service to be accessible from AngularJS.\n *\n * @howToUse\n *\n * First ensure that the service to be downgraded is provided in an {@link NgModule}\n * that will be part of the upgrade application. For example, let's assume we have\n * defined `HeroesService`\n *\n * {@example upgrade/static/ts/module.ts region=\"ng2-heroes-service\"}\n *\n * and that we have included this in our upgrade app {@link NgModule}\n *\n * {@example upgrade/static/ts/module.ts region=\"ng2-module\"}\n *\n * Now we can register the `downgradeInjectable` factory function for the service\n * on an AngularJS module.\n *\n * {@example upgrade/static/ts/module.ts region=\"downgrade-ng2-heroes-service\"}\n *\n * Inside an AngularJS component's controller we can get hold of the\n * downgraded service via the name we gave when downgrading.\n *\n * {@example upgrade/static/ts/module.ts region=\"example-app\"}\n *\n * @description\n *\n * Takes a `token` that identifies a service provided from Angular.\n *\n * Returns a [factory function](https://docs.angularjs.org/guide/di) that can be\n * used to register the service on an AngularJS module.\n *\n * The factory function provides access to the Angular service that\n * is identified by the `token` parameter.\n *\n * @experimental\n */\nexport function downgradeInjectable(token: any): Function {\n  const factory = function(i: Injector) { return i.get(token); };\n  (factory as any).$inject = [INJECTOR_KEY];\n\n  return factory;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentFactory, ComponentFactoryResolver, Injector, Type} from '@angular/core';\n\nimport * as angular from './angular1';\nimport {$COMPILE, $INJECTOR, $PARSE, INJECTOR_KEY, REQUIRE_INJECTOR, REQUIRE_NG_MODEL} from './constants';\nimport {DowngradeComponentAdapter} from './downgrade_component_adapter';\nimport {controllerKey, getComponentName} from './util';\n\nlet downgradeCount = 0;\n\n/**\n * @whatItDoes\n *\n * *Part of the [upgrade/static](/docs/ts/latest/api/#!?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * Allows an Angular component to be used from AngularJS.\n *\n * @howToUse\n *\n * Let's assume that you have an Angular component called `ng2Heroes` that needs\n * to be made available in AngularJS templates.\n *\n * {@example upgrade/static/ts/module.ts region=\"ng2-heroes\"}\n *\n * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n * that will make this Angular component available inside AngularJS templates.\n * The `downgradeComponent()` function returns a factory function that we\n * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n *\n * {@example upgrade/static/ts/module.ts region=\"ng2-heroes-wrapper\"}\n *\n * @description\n *\n * A helper function that returns a factory function to be used for registering an\n * AngularJS wrapper directive for \"downgrading\" an Angular component.\n *\n * The parameter contains information about the Component that is being downgraded:\n *\n * * `component: Type<any>`: The type of the Component that will be downgraded\n *\n * @experimental\n */\nexport function downgradeComponent(info: {\n  component: Type<any>;\n  /** @deprecated since v4. This parameter is no longer used */\n  inputs?: string[];\n  /** @deprecated since v4. This parameter is no longer used */\n  outputs?: string[];\n  /** @deprecated since v4. This parameter is no longer used */\n  selectors?: string[];\n}): any /* angular.IInjectable */ {\n  const idPrefix = `NG2_UPGRADE_${downgradeCount++}_`;\n  let idCount = 0;\n\n  const directiveFactory:\n      angular.IAnnotatedFunction = function(\n                                       $compile: angular.ICompileService,\n                                       $injector: angular.IInjectorService,\n                                       $parse: angular.IParseService): angular.IDirective {\n\n    return {\n      restrict: 'E',\n      terminal: true,\n      require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n      link: (scope: angular.IScope, element: angular.IAugmentedJQuery, attrs: angular.IAttributes,\n             required: any[]) => {\n        // We might have to compile the contents asynchronously, because this might have been\n        // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n        // been compiled.\n\n        const parentInjector: Injector|ParentInjectorPromise =\n            required[0] || $injector.get(INJECTOR_KEY);\n        const ngModel: angular.INgModelController = required[1];\n\n        const downgradeFn = (injector: Injector) => {\n          const componentFactoryResolver: ComponentFactoryResolver =\n              injector.get(ComponentFactoryResolver);\n          const componentFactory: ComponentFactory<any> =\n              componentFactoryResolver.resolveComponentFactory(info.component);\n\n          if (!componentFactory) {\n            throw new Error('Expecting ComponentFactory for: ' + getComponentName(info.component));\n          }\n\n          const id = idPrefix + (idCount++);\n          const injectorPromise = new ParentInjectorPromise(element);\n          const facade = new DowngradeComponentAdapter(\n              id, element, attrs, scope, ngModel, injector, $injector, $compile, $parse,\n              componentFactory);\n\n          const projectableNodes = facade.compileContents();\n          facade.createComponent(projectableNodes);\n          facade.setupInputs();\n          facade.setupOutputs();\n          facade.registerCleanup();\n\n          injectorPromise.resolve(facade.getInjector());\n        };\n\n        if (parentInjector instanceof ParentInjectorPromise) {\n          parentInjector.then(downgradeFn);\n        } else {\n          downgradeFn(parentInjector);\n        }\n      }\n    };\n  };\n\n  // bracket-notation because of closure - see #14441\n  directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n  return directiveFactory;\n}\n\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of Angular 1's $compile.\n */\nclass ParentInjectorPromise {\n  private injector: Injector;\n  private injectorKey: string = controllerKey(INJECTOR_KEY);\n  private callbacks: ((injector: Injector) => any)[] = [];\n\n  constructor(private element: angular.IAugmentedJQuery) {\n    // Store the promise on the element.\n    element.data(this.injectorKey, this);\n  }\n\n  then(callback: (injector: Injector) => any) {\n    if (this.injector) {\n      callback(this.injector);\n    } else {\n      this.callbacks.push(callback);\n    }\n  }\n\n  resolve(injector: Injector) {\n    this.injector = injector;\n\n    // Store the real injector on the element.\n    this.element.data(this.injectorKey, injector);\n\n    // Release the element to prevent memory leaks.\n    this.element = null;\n\n    // Run the queued callbacks.\n    this.callbacks.forEach(callback => callback(injector));\n    this.callbacks.length = 0;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef, ComponentFactory, ComponentRef, EventEmitter, Injector, OnChanges, ReflectiveInjector, SimpleChange, SimpleChanges, Type} from '@angular/core';\n\nimport * as angular from './angular1';\nimport {PropertyBinding} from './component_info';\nimport {$SCOPE} from './constants';\nimport {getAttributesAsArray, getComponentName, hookupNgModel} from './util';\n\nconst INITIAL_VALUE = {\n  __UNINITIALIZED__: true\n};\n\nexport class DowngradeComponentAdapter {\n  private inputChangeCount: number = 0;\n  private inputChanges: SimpleChanges = null;\n  private componentScope: angular.IScope;\n  private componentRef: ComponentRef<any> = null;\n  private component: any = null;\n  private changeDetector: ChangeDetectorRef = null;\n\n  constructor(\n      private id: string, private element: angular.IAugmentedJQuery,\n      private attrs: angular.IAttributes, private scope: angular.IScope,\n      private ngModel: angular.INgModelController, private parentInjector: Injector,\n      private $injector: angular.IInjectorService, private $compile: angular.ICompileService,\n      private $parse: angular.IParseService, private componentFactory: ComponentFactory<any>) {\n    (this.element[0] as any).id = id;\n    this.componentScope = scope.$new();\n  }\n\n  compileContents(): Node[][] {\n    const compiledProjectableNodes: Node[][] = [];\n    const projectableNodes: Node[][] = this.groupProjectableNodes();\n    const linkFns = projectableNodes.map(nodes => this.$compile(nodes));\n\n    this.element.empty();\n\n    linkFns.forEach(linkFn => {\n      linkFn(this.scope, (clone: Node[]) => {\n        compiledProjectableNodes.push(clone);\n        this.element.append(clone);\n      });\n    });\n\n    return compiledProjectableNodes;\n  }\n\n  createComponent(projectableNodes: Node[][]) {\n    const childInjector = ReflectiveInjector.resolveAndCreate(\n        [{provide: $SCOPE, useValue: this.componentScope}], this.parentInjector);\n\n    this.componentRef =\n        this.componentFactory.create(childInjector, projectableNodes, this.element[0]);\n    this.changeDetector = this.componentRef.changeDetectorRef;\n    this.component = this.componentRef.instance;\n\n    hookupNgModel(this.ngModel, this.component);\n  }\n\n  setupInputs(): void {\n    const attrs = this.attrs;\n    const inputs = this.componentFactory.inputs || [];\n    for (let i = 0; i < inputs.length; i++) {\n      const input = new PropertyBinding(inputs[i].propName, inputs[i].templateName);\n      let expr: any /** TODO #9100 */ = null;\n\n      if (attrs.hasOwnProperty(input.attr)) {\n        const observeFn = (prop => {\n          let prevValue = INITIAL_VALUE;\n          return (currValue: any) => {\n            if (prevValue === INITIAL_VALUE) {\n              prevValue = currValue;\n            }\n\n            this.updateInput(prop, prevValue, currValue);\n            prevValue = currValue;\n          };\n        })(input.prop);\n        attrs.$observe(input.attr, observeFn);\n\n      } else if (attrs.hasOwnProperty(input.bindAttr)) {\n        expr = (attrs as any /** TODO #9100 */)[input.bindAttr];\n      } else if (attrs.hasOwnProperty(input.bracketAttr)) {\n        expr = (attrs as any /** TODO #9100 */)[input.bracketAttr];\n      } else if (attrs.hasOwnProperty(input.bindonAttr)) {\n        expr = (attrs as any /** TODO #9100 */)[input.bindonAttr];\n      } else if (attrs.hasOwnProperty(input.bracketParenAttr)) {\n        expr = (attrs as any /** TODO #9100 */)[input.bracketParenAttr];\n      }\n      if (expr != null) {\n        const watchFn =\n            (prop => (currValue: any, prevValue: any) =>\n                 this.updateInput(prop, prevValue, currValue))(input.prop);\n        this.componentScope.$watch(expr, watchFn);\n      }\n    }\n\n    const prototype = this.componentFactory.componentType.prototype;\n    if (prototype && (<OnChanges>prototype).ngOnChanges) {\n      // Detect: OnChanges interface\n      this.inputChanges = {};\n      this.componentScope.$watch(() => this.inputChangeCount, () => {\n        const inputChanges = this.inputChanges;\n        this.inputChanges = {};\n        (<OnChanges>this.component).ngOnChanges(inputChanges);\n      });\n    }\n    this.componentScope.$watch(() => this.changeDetector && this.changeDetector.detectChanges());\n  }\n\n  setupOutputs() {\n    const attrs = this.attrs;\n    const outputs = this.componentFactory.outputs || [];\n    for (let j = 0; j < outputs.length; j++) {\n      const output = new PropertyBinding(outputs[j].propName, outputs[j].templateName);\n      let expr: any /** TODO #9100 */ = null;\n      let assignExpr = false;\n\n      const bindonAttr =\n          output.bindonAttr ? output.bindonAttr.substring(0, output.bindonAttr.length - 6) : null;\n      const bracketParenAttr = output.bracketParenAttr ?\n          `[(${output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8)})]` :\n          null;\n\n      if (attrs.hasOwnProperty(output.onAttr)) {\n        expr = (attrs as any /** TODO #9100 */)[output.onAttr];\n      } else if (attrs.hasOwnProperty(output.parenAttr)) {\n        expr = (attrs as any /** TODO #9100 */)[output.parenAttr];\n      } else if (attrs.hasOwnProperty(bindonAttr)) {\n        expr = (attrs as any /** TODO #9100 */)[bindonAttr];\n        assignExpr = true;\n      } else if (attrs.hasOwnProperty(bracketParenAttr)) {\n        expr = (attrs as any /** TODO #9100 */)[bracketParenAttr];\n        assignExpr = true;\n      }\n\n      if (expr != null && assignExpr != null) {\n        const getter = this.$parse(expr);\n        const setter = getter.assign;\n        if (assignExpr && !setter) {\n          throw new Error(`Expression '${expr}' is not assignable!`);\n        }\n        const emitter = this.component[output.prop] as EventEmitter<any>;\n        if (emitter) {\n          emitter.subscribe({\n            next: assignExpr ?\n                ((setter: any) => (v: any /** TODO #9100 */) => setter(this.scope, v))(setter) :\n                ((getter: any) => (v: any /** TODO #9100 */) =>\n                     getter(this.scope, {$event: v}))(getter)\n          });\n        } else {\n          throw new Error(\n              `Missing emitter '${output.prop}' on component '${getComponentName(this.componentFactory.componentType)}'!`);\n        }\n      }\n    }\n  }\n\n  registerCleanup() {\n    this.element.bind('$destroy', () => {\n      this.componentScope.$destroy();\n      this.componentRef.destroy();\n    });\n  }\n\n  getInjector(): Injector { return this.componentRef && this.componentRef.injector; }\n\n  private updateInput(prop: string, prevValue: any, currValue: any) {\n    if (this.inputChanges) {\n      this.inputChangeCount++;\n      this.inputChanges[prop] = new SimpleChange(prevValue, currValue, prevValue === currValue);\n    }\n\n    this.component[prop] = currValue;\n  }\n\n  groupProjectableNodes() {\n    let ngContentSelectors = this.componentFactory.ngContentSelectors;\n    return groupNodesBySelector(ngContentSelectors, this.element.contents());\n  }\n}\n\n/**\n * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n */\nexport function groupNodesBySelector(ngContentSelectors: string[], nodes: Node[]): Node[][] {\n  const projectableNodes: Node[][] = [];\n  let wildcardNgContentIndex: number;\n\n  for (let i = 0, ii = ngContentSelectors.length; i < ii; ++i) {\n    projectableNodes[i] = [];\n  }\n\n  for (let j = 0, jj = nodes.length; j < jj; ++j) {\n    const node = nodes[j];\n    const ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);\n    if (ngContentIndex != null) {\n      projectableNodes[ngContentIndex].push(node);\n    }\n  }\n\n  return projectableNodes;\n}\n\nfunction findMatchingNgContentIndex(element: any, ngContentSelectors: string[]): number {\n  const ngContentIndices: number[] = [];\n  let wildcardNgContentIndex: number;\n  for (let i = 0; i < ngContentSelectors.length; i++) {\n    const selector = ngContentSelectors[i];\n    if (selector === '*') {\n      wildcardNgContentIndex = i;\n    } else {\n      if (matchesSelector(element, selector)) {\n        ngContentIndices.push(i);\n      }\n    }\n  }\n  ngContentIndices.sort();\n\n  if (wildcardNgContentIndex !== undefined) {\n    ngContentIndices.push(wildcardNgContentIndex);\n  }\n  return ngContentIndices.length ? ngContentIndices[0] : null;\n}\n\nlet _matches: (this: any, selector: string) => boolean;\n\nfunction matchesSelector(el: any, selector: string): boolean {\n  if (!_matches) {\n    const elProto = <any>Element.prototype;\n    _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n        elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n  }\n  return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport * as angular from './angular1';\n\nexport function onError(e: any) {\n  // TODO: (misko): We seem to not have a stack trace here!\n  if (console.error) {\n    console.error(e, e.stack);\n  } else {\n    // tslint:disable-next-line:no-console\n    console.log(e, e.stack);\n  }\n  throw e;\n}\n\nexport function controllerKey(name: string): string {\n  return '$' + name + 'Controller';\n}\n\nexport function getAttributesAsArray(node: Node): [string, string][] {\n  const attributes = node.attributes;\n  let asArray: [string, string][];\n  if (attributes) {\n    let attrLen = attributes.length;\n    asArray = new Array(attrLen);\n    for (let i = 0; i < attrLen; i++) {\n      asArray[i] = [attributes[i].nodeName, attributes[i].nodeValue];\n    }\n  }\n  return asArray || [];\n}\n\nexport function getComponentName(component: Type<any>): string {\n  // Return the name of the component or the first line of its stringified version.\n  return (component as any).overriddenName || component.name || component.toString().split('\\n')[0];\n}\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  resolve: (value?: R|PromiseLike<R>) => void;\n  reject: (error?: any) => void;\n\n  constructor() {\n    this.promise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n}\n\n/**\n * @return Whether the passed-in component implements the subset of the\n *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n *     compatibility.\n */\nfunction supportsNgModel(component: any) {\n  return typeof component.writeValue === 'function' &&\n      typeof component.registerOnChange === 'function';\n}\n\n/**\n * Glue the AngularJS `NgModelController` (if it exists) to the component\n * (if it implements the needed subset of the `ControlValueAccessor` interface).\n */\nexport function hookupNgModel(ngModel: angular.INgModelController, component: any) {\n  if (ngModel && supportsNgModel(component)) {\n    ngModel.$render = () => { component.writeValue(ngModel.$viewValue); };\n    component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A `PropertyBinding` represents a mapping between a property name\n * and an attribute name. It is parsed from a string of the form\n * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n * and attribute have the same identifier.\n */\nexport class PropertyBinding {\n  bracketAttr: string;\n  bracketParenAttr: string;\n  parenAttr: string;\n  onAttr: string;\n  bindAttr: string;\n  bindonAttr: string;\n\n  constructor(public prop: string, public attr: string) { this.parseBinding(); }\n\n  private parseBinding() {\n    this.bracketAttr = `[${this.attr}]`;\n    this.parenAttr = `(${this.attr})`;\n    this.bracketParenAttr = `[(${this.attr})]`;\n    const capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);\n    this.onAttr = `on${capitalAttr}`;\n    this.bindAttr = `bind${capitalAttr}`;\n    this.bindonAttr = `bindon${capitalAttr}`;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const $COMPILE = '$compile';\nexport const $CONTROLLER = '$controller';\nexport const $DELEGATE = '$delegate';\nexport const $HTTP_BACKEND = '$httpBackend';\nexport const $INJECTOR = '$injector';\nexport const $PARSE = '$parse';\nexport const $PROVIDE = '$provide';\nexport const $ROOT_SCOPE = '$rootScope';\nexport const $SCOPE = '$scope';\nexport const $TEMPLATE_CACHE = '$templateCache';\nexport const $TEMPLATE_REQUEST = '$templateRequest';\n\nexport const $$TESTABILITY = '$$testability';\n\nexport const COMPILER_KEY = '$$angularCompiler';\nexport const GROUP_PROJECTABLE_NODES_KEY = '$$angularGroupProjectableNodes';\nexport const INJECTOR_KEY = '$$angularInjector';\nexport const NG_ZONE_KEY = '$$angularNgZone';\n\nexport const REQUIRE_INJECTOR = '?^^' + INJECTOR_KEY;\nexport const REQUIRE_NG_MODEL = '?ngModel';\n\nexport const UPGRADE_MODULE_NAME = '$$UpgradeModule';\n"],"names":["ÉµNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","NgZone","Injector","NgModule","angular.element","Testability","element","ÉµlooseIdentical","ComponentFactoryResolver","SimpleChange","ReflectiveInjector"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;IWaa,IAAb,QAAA,GAAA,UAAA,CAAA;AACA,IAAa,WAAW,GAAxB,aAAA,CAAA;AACA,IAAA,SAAA,GAAA,WAAA,CAAA;AACA,IAAa,aAAb,GAAA,cAAA,CAAA;AACA,IAAa,SAAb,GAAA,WAAA,CAAA;AACA,IAAA,MAAA,GAAA,QAAA,CAAA;AAEA,IAAa,QAAb,GAAA,UAAA,CAAA;AAGA,IAAA,MAAA,GAAA,QAAA,CAAA;AACA,IAAa,eAAe,GAA5B,gBAA+C,CAAC;AAGhD,IAAa,aAAb,GAA6B,eAA7B,CAAA;;;;;;;;;;;;;;;;;;ADLA,IAAA,eAAA,IAAA,YAAA;IAEU,SAAV,eAAA,CAAA,IAAA,EAAA,IAAA,EAAA;QACI,IAAI,CAAC,IAAT,GAAA,IAAoB,CAApB;QACI,IAAI,CAAC,IAAT,GAAA,IAAA,CAAqB;QACjB,IAAI,CAAC,YAAT,EAAA,CAAA;KACA;IACA,eAAe,CAAf,SAAuB,CAAvB,YAAA,GAAA,YAAA;QACI,IAAI,CAAC,WAAW,GAApB,GAAA,GAA2B,IAA3B,CAAA,IAAA,GAAyC,GAAzC,CAAA;QACI,IAAI,CAAC,SAAT,GAAA,GAAA,GAAA,IAAA,CAAA,IAAA,GAAA,GAAA,CAAA;QACA,IAAA,CAAA,gBAAA,GAAA,IAAA,GAAA,IAAA,CAAA,IAAA,GAAA,IAAA,CAAA;QACA,IAAA,WAAA,GAAC,IAAD,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,WAAA,EAAA,GAAA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA;QAnBA,IAAA,CAAA,MAAA,GAAA,IAAA,GAAA,WAAA,CAAA;;QDdA,IAAA,CAAA,UAAA,GAAA,QAAA,GAAA,WAAA,CAAA;;;;;;;;;;;;IAyCE,OAAQ,GAAV,GAAA,IAA4B,GAA5B,YAAA,CAAA;CACC;;;;;;;;;;;;;CA6BD;;;;;AAKA,SAAA,aAAA,CAAA,OAAA,EAAA,SAAA,EAAA;;QD5EA,OAAA,CAAA,OAAA,GAAA,YAAA,EAAA,SAAA,CAAA,UAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA,EAAA,CAAA;;;;;;;;;;;AA4BA,IAAA,aAAA,GAAgB;IAAhB,iBAAA,EAAkC,IAAlC;CACA,CAAA;AAAA,IAAA,yBAAA,IAAA,YAAA;IACA,SAAA,yBAAA,CAAA,EAAA,EAAA,OAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAAA,EAAA,cAAA,EAAA,SAAA,EAAA,QAAA,EAAA,MAAA,EAAA,gBAAA,EAAA;QAA2D,IAA3D,CAAA,EAAA,GAAA,EAAA,CAAA;QACc,IAAd,CAAA,OAAA,GAAA,OAAA,CAAA;QAA2D,IAA3D,CAAA,KAAA,GAAmE,KAAnE,CAAA;QACc,IAAd,CAAA,KAAA,GAAA,KAAA,CAAA;QAAqD,IAArD,CAAA,OAAA,GAAA,OAAA,CAAA;QAZU,IAAV,CAAA,cAAA,GAAA,cAAA,CAAA;QACU,IAAV,CAAA,SAAA,GAAsB,SAAtB,CAAA;QAEU,IAAV,CAAA,QAAA,GAAA,QAAgD,CAAC;QACvC,IAAV,CAAA,MAAA,GAAmB,MAAnB,CAA+B;QACrB,IAAV,CAAA,gBAAA,GAAA,gBAAA,CAAA;QAQK,IAAI,CAAC,gBAAwB,GAAG,CAArC,CAAA;QACI,IAAI,CAAC,YAAT,GAAA,IAAA,CAAA;QACA,IAAA,CAAA,YAAA,GAAA,IAAA,CAAA;QAEA,IAAA,CAAA,SAAA,GAAA,IAAA,CAAA;QAAE,IAAF,CAAA,cAAA,GAAA,IAAA,CAAA;QACI,IAAM,CAAV,OAAA,CAAA,CAAA,CAAA,CAAA,EAAA,GAAA,EAAA,CAAA;QACI,IAAM,CAAV,cAAA,GAAA,KAA2C,CAAC,IAA5C,EAAA,CAAA;KACA;IAEA,yBAAyB,CAAzB,SAAA,CAAA,eAAA,GAAA,YAAA;QAEI,IAAJ,KAAA,GAAA,IAAoB,CAApB;QACA,IAAM,wBAAN,GAAA,EAAA,CAA0B;QAC1B,IAAA,gBAAA,GAAA,IAAA,CAAA,qBAAA,EAAA,CAAA;QACA,IAAA,OAAA,GAAa,gBAAb,CAAA,GAAiC,CAAC,UAAlC,KAAA,EAAA,EAAA,OAAA,KAAA,CAAA,QAAA,CAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAA;QACA,IAAA,CAAO,OAAP,CAAA,KAAA,EAAA,CAAA;QACA,OAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;YAEA,MAAA,CAAA,KAAA,CAAA,KAAA,EAAA,UAAA,KAAA,EAAA;gBACA,wBAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA;gBAEA,KAAA,CAAA,OAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA;aACA,CAAA,CAAA;SAGA,CAAA,CAAA;QACA,OAAA,wBAAA,CAAoC;KACpC,CAAA;IACA,yBAAyB,CAAC,SAA1B,CAAA,eAAA,GAAA,UAAA,gBAAA,EAAA;QAEI,IAAJ,aAAA,GAAAU,gCAAA,CAAA,gBAAA,CAAA,CAAA,EAAA,OAAA,EAAA,MAAA,EAAA,QAAA,EAAA,IAAA,CAAA,cAAA,EAAA,CAAA,EAAA,IAAA,CAAA,cAAA,CAAA,CAAA;QACA,IAAA,CAAA,YAAA;YAEA,IAAA,CAAA,gBAAA,CAAA,MAAA,CAAA,aAAE,EAAF,gBAAA,EAAA,IAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA;QAAE,IAAF,CAAA,cAAA,GAAA,IAAA,CAAA,YAAA,CAAA,iBAAA,CAAA;QACI,IAAM,CAAV,SAAA,GAAuB,IAAvB,CAA4B,YAA5B,CAAA,QAAA,CAAA;QACI,aAAe,CAAnB,IAAwB,CAAxB,OAAA,EAAA,IAAA,CAAA,SAAA,CAAA,CAAA;KACA,CAAA;IACA,yBAAA,CAAA,SAAA,CAAA,WAA+C,GAAG,YAAlD;QACA,IAAM,KAAN,GAAc,IAAd,CAAA;QAEA,IAAM,KAAN,GAAA,IAAA,CAAA,KAAA,CAAA;QACA,IAAA,MAAA,GAAA,IAAA,CAAA,gBAAA,CAA2B,MAA3B,IAAA,EAAA,CAAA;QACA,KAAA,IAAA,CAAA,GAAA,CAAA,EAAc,CAAd,GAAA,MAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;YACA,IAAA,KAAA,GAAA,IAAA,eAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,QAAA,EAAA,MAAA,CAAA,CAAA,CAAA,CAAA,YAAA,CAAA,CAAA;YACA,IAAA,IAAA,GAAA,IAAA,CAAgB;YAChB,IAAA,KAAA,CAAA,cAAA,CAAuB,KAAvB,CAAA,IAAA,CAAA,EAAoC;gBACpC,IAAA,SAAA,GAAA,CAAA,UAAA,IAAA,EAAA;oBAEA,IAAY,SAAZ,GAAA,aAAA,CAAA;oBACA,OAAA,UAAA,SAAkC,EAAlC;wBACA,IAAA,SAAA,KAAA,aAAA,EAAA;4BACA,SAAA,GAAA,SAAA,CAAA;yBACA;wBAEA,KAAA,CAAA,WAAA,CAAA,IAAA,EAAA,SAAA,EAAA,SAAA,CAAA,CAAA;wBAAA,SAAA,GAAA,SAAA,CAAA;qBACA,CAAA;iBACA,EAAA,KAAA,CAAA,IAAA,CAAA,CAAA;gBAAA,KAAiB,CAAjB,QAAA,CAAA,KAAA,CAAA,IAAqC,EAArC,SAAA,CAAA,CAAA;aACA;iBACA,IAAA,KAAA,CAAA,cAAA,CAAA,KAAA,CAAA,QAAA,CAAA,EAAA;gBAAA,IAAA,GAAA,KAAA,mBAA2C,KAA3C,CAAA,QAAyD,CAAzD,CAAA;aACA;iBACA,IAAA,KAAA,CAAA,cAAA,CAAA,KAAA,CAAA,WAAA,CAAA,EAAA;gBAAA,IAAA,GAAA,KAAA,mBAA2C,KAA3C,CAAA,WAA4D,CAAC,CAA7D;aACA;iBACA,IAAA,KAAA,CAAA,cAAA,CAAA,KAAA,CAAA,UAAA,CAAA,EAAA;gBACU,IAAI,GAAd,KAAsB,mBAAtB,KAAA,CAAA,UAAA,CAAA,CAAA;aACA;iBAEA,IAAA,KAAA,CAAiB,cAAjB,CAAA,KAAA,CAAA,gBAAA,CAAA,EAAA;gBAAA,IAA6D,GAA7D,KAAqE,mBAArE,KAAA,CAAA,gBAAA,CAAA,CAAA;aACA;YACA,IAAA,IAAA,IAAA,IAAA,EAAA;gBACA,IAAA,OAAA,GAAA,CAAA,UAAA,IAAA,EAAA;oBAAA,OAAA,UAAA,SAAA,EAAA,SAAA,EAAA;wBAEA,OAAA,KAAA,CAAA,WAAA,CAA2C,IAA3C,EAAA,SAA0D,EAA1D,SAAA,CAAA,CAAA;qBACA,CAAA;iBAAA,EAAA,KAAA,CAAA,IAAA,CAAA,CAA2C;;aAE3C;SACA;QACA,IAAA,SAAA,GAAA,IAAA,CAAA,gBAAA,CAAA,aAAA,CAAA,SAAA,CAAA;QACA,IAAA,SAAY,IAAZ,SAAyB,CAAzB,WAAA,EAAA;;YAEA,IAAA,CAAA,YAAA,GAAA,EAAA,CAAA;YACA,IAAA,CAAA,cAAA,CAAA,MAAA,CAAA,YAAA,EAAA,OAAA,KAAA,CAAA,gBAAA,CAAA,EAAA,EAAA,YAAA;gBACA,IAAA,YAAA,GAA+B,KAA/B,CAAA,YAAA,CAAA;gBACA,KAAA,CAAA,YAAA,GAAA,EAAA,CAAA;gBAEA,KAAA,CAAA,SAAA,CAAA,WAAA,CAAA,YAAA,CAAA,CAAA;aAAA,CAAA,CAAA;SACA;QACI,IAAM,CAAV,cAAyB,CAAzB,MAAA,CAAA,YAAA,EAAA,OAAA,KAAA,CAAA,cAAA,IAAA,KAAA,CAAA,cAAA,CAAA,aAAA,EAAA,CAAA,EAAA,CAAA,CAAA;KACA,CAAA;IACA,yBAAyB,CAAzB,SAAA,CAAA,YAAgD,GAAG,YAAnD;QACA,IAAM,KAAN,GAAc,IAAd,CAAA;QACA,IAAM,KAAN,GAAA,IAAA,CAAA,KAAA,CAAA;QAEA,IAAM,OAAN,GAAA,IAAsB,CAAtB,gBAAA,CAAA,OAAA,IACoC,EADpC,CAAA;QAEA,KAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,OAA+B,CAA/B,MAAsC,EAAtC,CAAA,EAAA,EAAA;YACA,IAAU,MAAV,GAAA,IAAqB,eAArB,CAAA,OAAA,CAAA,CAAA,CAAA,CAAgD,QAAhD,EAA0D,OAA1D,CAAA,CAAA,CAAA,CAAA,YAAA,CAAkF,CAAlF;YACA,IAAU,IAAI,GAAd,IAAA,CAAA;YAEM,IAAI,UAAV,GAAA,KAAA,CAAA;YACA,IAAQ,UAAR,GAAA,MAAA,CAAA,UAAA,GAAA,MAAA,CAAA,UAAA,CAAA,SAAA,CAAA,CAAA,EAAA,MAAA,CAAA,UAAA,CAAA,MAAA,GAAA,CAAA,CAAA,GAAA,IAAA,CAAA;YACA,IAAA,gBAAA,GAAA,MAAA,CAAA,gBAAA;gBAAA,IAAA,GAAA,MAAA,CAAA,gBAAA,CAAA,SAAA,CAAA,CAAsD,EAAtD,MAAA,CAAA,gBAAA,CAAA,MAAA,GAAA,CAAA,CAAA,GAAA,IAAA;gBACQ,IAAI,CAAZ;YACA,IAAA,KAAA,CAAA,cAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA;gBAAA,IAAA,GAAA,KAAA,mBAAA,MAAiD,CAAjD,MAAA,CAAA,CAAA;aACA;iBACA,IAAA,KAAkB,CAAlB,cAAA,CAAA,MAAA,CAAA,SAAA,CAAA,EAAA;gBACA,IAAA,GAAA,KAAA,mBAAA,MAAA,CAAA,SAAA,CAAA,CAAA;aAAA;iBACA,IAAA,KAAA,CAAA,cAAA,CAAA,UAAA,CAAA,EAAA;gBACQ,IAAR,GAAA,KAAA,mBAAA,UAAA,CAAA,CAAA;gBACA,UAAA,GAAA,IAAA,CAAA;aAEA;iBACA,IAAA,KAAoB,CAApB,cAAmC,CAAnC,gBAAA,CAAA,EAAA;gBACQ,IAAM,GAAd,KAAA,mBAAA,gBAAA,CAAA,CAAA;gBACQ,UAAR,GAAA,IAAA,CAA0B;aAC1B;YACA,IAAA,IAAA,IAAA,IAAA,IAAA,UAAA,IAAA,IAAA,EAAA;gBACQ,IAAM,MAAd,GAAA,IAAA,CAA4B,MAA5B,CAAA,IAAuC,CAAvC,CAAA;gBACQ,IAAI,MAAZ,GAAqB,MAArB,CAAA,MAAA,CAAA;gBACA,IAAU,UAAV,IAAA,CAAA,MAAA,EAAA;oBACA,MAAA,IAAkB,KAAlB,CAAA,cAAA,GAAA,IAAA,GAAA,sBAAA,CAAA,CAAA;iBACA;gBACA,IAAA,OAAA,GAAA,IAAA,CAAA,SAAA,CAA6B,MAA7B,CAAA,IAAkC,CAAlC,CAAA;gBACA,IAAA,OAAA,EAAA;oBAAA,OAAA,CAAA,SAAA,CAAA;wBACA,IAAA,EAAA,UAAA;4BACA,CAAA,UAAA,MAAA,EAAA,EAAA,OAAA,UAAA,CAAA,oBAAA,EAAA,OAAA,MAAA,CAAA,KAAA,CAAA,KAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA,MAAA,CAAA;4BAAA,CAAA,UAAA,MAAA,EAAA;gCAAA,OAAA,UAAA,CAAA,oBAAA;oCACA,OAAA,MAAA,CAAA,KAAA,CAAA,KAAA,EAAA,EAAA,MAAA,EAC6C,CAD7C,EAAA,CAAA,CAAA;iCAEA,CAAA;6BAAA,EAAA,MAAA,CAAA;qBACA,CAAA,CAAA;iBACA;qBACA;oBAEA,MAAA,IAAA,KAAA,CAAA,mBAAiB,GAAf,MAAF,CAAA,IAAA,GAAA,kBAAA,GAAA,gBAAA,CAAA,IAAA,CAAA,gBAAA,CAAA,aAAA,CAAA,GAAA,IAAA,CAAA,CAAA;iBAAA;aACS;SACT;KACA,CAAA;IACA,yBAAA,CAAA,SAAA,CAAA,eAAA,GAAA,YAAA;QACA,IAAA,KAAA,GAAA,IAAA,CAAA;QAEA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,UAAA,EAAA,YAAA;YAEA,KAAA,CAAA,cAAA,CAAA,QAAA,EAAA,CAAA;YACQ,KAAK,CAAb,YAAA,CAA2B,OAA3B,EAAA,CAAA;SACA,CAAA,CAAA;KACA,CAAA;IACA,yBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA,EAAA,OAAA,IAAA,CAAA,YAAA,IAAA,IAAA,CAAA,YAAA,CAAA,QAAA,CAAA,EAAA,CAAA;IAEA,yBAAA,CAAA,SAAA,CAAoC,WAApC,GAAA,UAAA,IAAA,EAAA,SAAA,EAAA,SAAA,EAAA;QACA,IAAA,IAAA,CAAA,YAAA,EAAA;YAEA,IAAA,CAAA,gBAAA,EAAA,CAAA;YACQ,IAAR,CAAA,YAAA,CAA0B,IAA1B,CAAA,GAAkC,IAAlCD,0BAAkD,CAAC,SAAnD,EAAA,SAAA,EAAA,SAAA,KAAA,SAAA,CAAA,CAAA;SACA;QACA,IAAA,CAAA,SAAA,CAAA,IAAA,CAAA,GAAA,SAAA,CAAA;KACA,CAAA;IAAA,yBAxKA,CAAA,SAAA,CAAA,qBAAA,GAAA,YAwKA;QAEA,IAAA,kBAAA,GAAA,IAAA,CAAA,gBAAA,CAAA,kBAAA,CAAA;;;IAGA,OAAA,yBAAA,CAAA;CACA,EAAA,CAAE,CAAF;;;;AAKA,SAAA,oBAAA,CAAA,kBAAA,EAAA,KAAA,EAAA;IAEE,IAAF,gBAAA,GAAA,EAAA,CAA4B;IAC5B,IAAI,sBAAJ,CAAA;IACA,KAAA,IAAA,CAAA,GAAA,CAAA,EAAA,EAAA,GAAA,kBAAA,CAAA,MAAA,EAAA,CAAA,GAAsD,EAAtD,EAA0D,EAAE,CAA5D,EAAA;QACI,gBAAJ,CAAA,CAAsB,CAAtB,GAA0B,EAA1B,CAAA;KACA;IACA,KAAK,IAAL,CAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAA,CAAA,MAAA,EAAA,CAAA,GAAA,EAAA,EAAA,EAAA,CAAA,EAAA;QACA,IAAA,IAAA,GAAA,KAAA,CAAA,CAAA,CAAA,CAAA;QAEA,IAAA,cAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,kBAAA,CAAA,CAAA;QACA,IAAA,cAAA,IAAA,IAAA,EAAA;YAEA,gBAAA,CAAA,cAAgD,CAAhD,CAAkD,IAAlD,CAAA,IAAA,CAAA,CAAA;SACA;KACA;IACE,OAAF,gBAAA,CAAA;CACA;AACA,SAAA,0BAAA,CAAA,OAAA,EAAA,kBAAA,EAAA;IACA,IAAA,gBAAA,GAAA,EAAA,CAAA;IACA,IAAA,sBAAA,CAAA;IAAA,KAAA,IAAW,CAAX,GAAA,CAAA,EAAA,CAAA,GAAA,kBAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;QACA,IAAM,QAAN,GAAA,kBAAmC,CAAnC,CAAA,CAAA,CAAA;QACA,IAAA,QAAA,KAAA,GAAA,EAAA;YACA,sBAAA,GAAA,CAAA,CAAA;SACK;aACL;YACA,IAAA,eAAA,CAAA,OAAA,EAAA,QAAA,CAAA,EAAA;gBAEA,gBAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;aACA;SACA;KACA;IACA,gBAAA,CAAA,IAAA,EAAA,CAAA;IAEI,IAAJ,sBAAA,KAAA,SAAA,EAAA;QAEA,gBAAA,CAAyB,IAAS,CAAlC,sBAAA,CAAA,CAAA;KACA;IACA,OAAA,gBAAA,CAAA,MAAA,GAAA,gBAAA,CAAA,CAAA,CAAA,GAAA,IAAA,CAAA;CACA;AACA,IAAA,QAAQ,CAAR;AACA,SAAA,eAAA,CAAA,EAAA,EAAA,QAAA,EAAA;IACE,IAAF,CAAA,QAAA,EAAA;QACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;YDjPA,OAAA,CAAA,iBAAA,IAAA,OAAA,CAAA,gBAAA,IAAA,OAAA,CAAA,qBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqEA,SAAA,kBAAA,CAAA,IAAA,EAAA;IACA,IAAA,QAAA,GAAA,cAAA,GAAA,cAAA,EAAA,GAAA,GAAA,CAAA;IACA,IAAA,OAAA,GAAA,CAAa,CAAb;IACA,IAAA,gBAAA,GAAA,UAAA,QAAA,EAAA,SAAA,EAAA,MAAA,EAAA;;;;YAMA,OAAA,EAAA,CAAA,gBAAA,EAAA,gBAAA,CAAA;YAEA,IAAQ,EAAR,UAAA,KAAA,EAAA,OAAgE,EAAhE,KAAA,EAAA,QAAA,EAAA;;;;gBAQA,IAAU,cAAV,GAAA,QAAA,CAAA,CAAA,CAAA,IAAA,SAAA,CAAA,GAAA,CAAA,YAAA,CAAA,CAAA;gBACA,IAAA,OAAA,GAAkB,QAAlB,CAA2B,CAAC,CAA5B,CAAA;gBACA,IAAA,WAAA,GAAA,UAAA,QAAA,EAAA;oBAEU,IAAM,wBAAwB,GAAG,QAA3C,CAAA,GAAA,CAAAD,sCAAA,CAAA,CAAA;oBACU,IAAM,gBAAhB,GAAA,wBAA2D,CAAC,uBAA5D,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA;oBACU,IAAM,CAAhB,gBAAA,EAAA;wBAIgB,MAAhB,IAAA,KAAA,CAAgC,kCAAhC,GAAA,gBAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA,CAAA;qBACA;oBACU,IAAV,EAAgB,GAAhB,QAAA,IAA+B,OAA/B,EAAA,CAAA,CAAA;oBACU,IAAV,eAA6B,GAAG,IAAhC,qBAAA,CAAA,OAAA,CAAA,CAAA;oBACU,IAAV,MAAA,GAAA,IAAA,yBAAA,CAAA,EAAA,EAAA,OAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAAA,QAAA,EAAA,MAAA,EAAA,gBAAA,CAAA,CAAA;oBAEU,IAAV,gBAAA,GAAiC,MAAjC,CAAwC,eAAe,EAAvD,CAAA;oBACA,MAAA,CAAA,eAAA,CAAA,gBAAA,CAAA,CAAA;oBAEY,MAAZ,CAAA,WAAA,EAAA,CAAA;oBACU,MAAV,CAAA,YAA6B,EAA7B,CAAA;oBACA,MAAA,CAAA,eAAA,EAAA,CAAA;oBAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,WAAA,EAAA,CAAA,CAAA;iBACA,CAAA;gBACA,IAAA,cAAA,YAAA,qBAAA,EAAA;oBACA,cAAA,CAAA,IAAA,CAAA,WAAA,CAAA,CAAA;iBACA;qBACA;;iBAGA;aACA;SACA,CAAA;;;;;CAMA;;;;;;IAOA,SAAA,qBAAA,CAAA,OAAA,EAAA;QACA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA;QAEA,IAAA,CAAA,WAAA,GAAA,aAAM,CAAN,YAAO,CAAP,CAAA;QACI,IAAI,CAAR,SAAA,GAAqB,EAAE,CAAvB;;QAEA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA,WAAA,EAAA,IAAA,CAAA,CAAA;KAAA;IACA,qBAAA,CAAoB,SAApB,CAAA,IAAkC,GAAlC,UAAA,QAAA,EAAA;QACA,IAAA,IAAA,CAAA,QAAA,EAAA;YACA,QAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAA;SAEA;aACS;;SAGT;;IAGA,qBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAA,QAAA,EAAA;;;QAII,IAAI,CAAC,OAAT,CAAA,IAAA,CAAA,IAAA,CAAA,WAAA,EAAA,QAAA,CAAA,CAAA;;QAEA,IAAA,CAAA,OAAA,GAAA,IAAA,CAAA;;;QD5JA,IAAA,CAAA,SAAA,CAAA,MAAA,GAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IDAA,IAAA,OAAA,GAAA,UAAA,CAAA,EAAA,EAAA,OAAA,CAAA,CAAA,GAAA,CAAA,KAAA,CAAA,CAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ADoNA,SAAA,IAAA,GAAA;IACE,MAAF,IAAA,KAAA,CAAA,+BAAA,CAAA,CAAA;CACA;AACA,IAAE,OAAF,GAAA;IACE,SAAF,EAAA,IAAA;IACA,MAAA,EAAA,IAAA;IAGI,OAAJ,EAAA,IAAA;IACE,OAAF,EAAA,IAAA;IACA,eAAA,EAAA,IAA4B;IAC5B,cAAA,EAAA,IAAA;CACC,CAAD;AAAE,IAAF;IAEA,IAAA,MAAA,CAAA,cAAA,CAAA,SAAA,CAAA,EAAA;QAEA,OAAA,GAAA,MAAiC,CAAjC,OAAA,CAA0C;KAC1C;CACA;;CDtOA;;;;;;;;;;;AAmBA,IAAA,iBAAA,GAAA,wBAAA,CAAA;AAAA,IAAA,aAAA,GAAA,eAAA,CAAA;AACA,IAAA,eAAA,GAAA;IACA,iBAAA,EAAA,IAAA;CAEA,CAAA;AAEA,IAAA,QAAA,IAAA,YAAA;IACA,SAAA,QAAA,GAAA;QAAA,IAAA,CAAA,qBAAA,GAAA,EAAA,CAAA;QAPA,IAAA,CAAA,qBAAA,GAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAwGA,SAAA,gBAAA,CAAA,IAAA,EAAA,UAAA,EAAA,QAAA,EAAA;QACI,IAAI,CAAC,IAAT,GAAA,IAAA,CAAA;QACI,IAAI,CAAC,UAAT,GAAA,UAAA,CAAA;QACI,IAAI,CAAC,QAAT,GAAoB,QAAQ,CAA5B;QAEI,IAAI,CAAC,SAAT,GAAA,QAA6B,CAAC,GAA9B,CAAA,SAA2C,CAAC,CAA5C;QACI,IAAI,CAAC,QAAQ,GAAGJ,IAApB,CAAA,SAAA,CAAA,GAAA,CAAA,QAAA,CAAA,CAAA;QAEI,IAAI,CAAC,cAAT,GAA0B,IAA1B,CAAA,SAAA,CAAA,GAA4C,CAAC,eAA7C,CAAA,CAAA;QACI,IAAI,CAAC,YAAT,GAAwB,IAAxB,CAAA,SAAA,CAAA,GAAA,CAA2C,aAA3C,CAAA,CAA0D;;;QAItD,IAAM,CAAV,QAAA,GAAsB,OAAtB,CAAA,IAAkC,CAAlC,OAAA,CAAA,CAA4C;;;;;QAM5C,IAAA,YAAA,GAAA,QAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA;;;;QAII,IAAM,CAAV,iBAAA,EAA8B,CAA9B;KACA;;QAGI,IAAM,KAAV,GAAA,IAAA,CAAA;;QAEI,IAAI,iBAAR,GAAA,IAAA,CAAA,iBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA;QACA,IAAM,MAAN,GAAA,IAAA,CAAA,eAAA,CAAoC,IAApC,CAAA,SAAA,CAAA,CAAoD;;QAEpD,IAAA,cAAA,GAAA,IAA+B,CAA/B,SAAA,CAAA,UAAA,CAAA;QACA,IAAM,gBACI,GADV,IAAA,CAAA,SAAA,CAAA,gBAAA,CAAA;QAEA,IAAA,cAAA,EAAA;;SAGA;aACS,IAAT,gBAAA,EAAA;;SAGA;;QAII,IAAI,CAAR,kBAAA,GAAA,gBAAA,GAAiD,IAAjD,CAAA,kBAAA,GAAA,IAAA,CAAA,eAAA,CAAA;QACA,IAAM,CAAN,WAAA,EAAA,CAAA;;QAEA,IAAA,gBAAA,GAAA,IAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAA6D;QAC7D,IAAA,mBAAA,GAAA,IAAA,CAAA,cAAA,CAAA,IAAA,CAAA,SAAA,CAAA,IAAA,EAAA,IAAA,CAAA,QAAA,EAAA,gBAAA,CAAA,CAAA;QACA,IAAA,IAAA,CAAA,SAAA,CAAA,gBAAA,IAAA,KAAA,CAAA,gBAAA,CAAA,EAAA;;YAGQ,MAAR,CAAA,IAAA,CAAA,wBAAA,CAAA,CAAA,OAAA,CAAA,UAAA,GAAA,EAAA;gBACU,KAAV,CAAA,kBAAA,CAAA,GAAA,CAAA,GAAA,wBAAA,CAAA,GAAA,CAAA,CAAA;aACA,CAAA,CAAA;SACK;;QAGD,IAAI,IAAI,CAAC,cAAb,EAAA;YACM,IAAI,CAAC,cAAX,CAAA,IAA8B,CAA9B,cAAA,CAAA,CAAA;YACA,IAAA,CAAA,cAAA,GAAA,IAAA,CAAA;;;QAIA,IAAM,IAAM,CAAZ,kBAAA,IAAA,UAAA,CAAA,IAAA,CAAA,kBAAA,CAAA,OAAA,CAAA,EAAgE;YAE1D,IAAI,CAAC,kBAAX,CAAA,OAAA,EAAA,CAAA;SACA;;;YAIU,IAAI,WAAd,GAAA,YAAA,EAAA,OAAA,KAAA,CAAA,kBAAA,CAAA,QAAA,EAAA,CAAA,EAAA,CAAA;YACU,IAAV,CAAA,wBAAA,GAAA,IAAA,CAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,WAAA,CAAA,CAAA;YACU,WAAW,EAArB,CAAA;SACA;;QAEI,IAAI,IAAR,GAAe,IAAf,CAAA,SAAA,CAAA,IAAA,CAAA;QACA,IAAM,OAAO,GAAb,CAAA,OAAA,IAAA,IAAA,QAAwC,KAAxC,IAAiD,CAAjD,GAAA,CAAA;QACA,IAAA,QAAA,GAAA,CAAA,OAAA,IAAA,IAAA,QAAA,IAAA,IAAA,CAAA,IAAA,GAAA,IAAA,CAAA;QAEI,IAAM,KAAV,GAAA,aAAA,CAAA;QACA,IAAQ,YAAR,GAAA,aAAA,CAAA;QAAA,IAAA,OAAA,EAAA;YACA,OAAe,CAAC,IAAhB,CAAA,eAAA,EAAA,IAAA,CAAA,QAAA,EAAA,KAAA,EAAA,mBAAA,EAAA,YAAA,CAAA,CAAA;SAEA;QACA,IAAM,gBAAN,GAAA,UAAmC,KAAnC,EAA0C,WAA1C,EAAA;YACA,OAAA,WAAA,CAAA,iBAAA,CAAA,CAAA;;QAGI,MAAJ,CAAA,IAAA,CAAA,eAA+B,EAA/B,IAAA,EAAA,EAAA,uBAAA,EAAA,gBAAkF,EAAlF,CAAA,CAAA;QACA,IAAM,QAAN,EAAA;YACA,QAAA,CAAA,IAAA,CAAA,eAAA,EAAA,IAAA,CAAA,QAAA,EAAA,KAAA,EAAA,mBAAA,EAAA,YAAA,CAAA,CAAA;SACA;;QAGI,IAAI,IAAR,CAAa,kBAAb,IAAA,UAAA,CAAA,IAAA,CAAA,kBAAA,CAAA,SAAA,CAAA,EAAA;YACM,IAAI,CAAC,kBAAX,CAAA,SAAA,EAAA,CAAA;SACK;KAAL,CAAA;IACA,gBAAA,CAAA,SAAA,CAAyB,WAAzB,GAAA,UAAA,OAAA,EAAA;QACA,IAAA,CAAA,IAAA,CAAA,kBAAA,EAAA;YACA,IAAA,CAAA,cAAA,GAAA,OAAA,CAAA;SAEA;aAAA;YACU,IAAV,CAAA,cAAA,CAAA,OAAA,CAAsC,CAAC;SACvC;KACA,CAAA;IAEA,gBAAA,CAAA,SAA0B,CAA1B,SAAA,GAAA,YAAA;QACA,IAAM,KAAN,GAAA,IAAoB,CAApB;QACA,IAAM,qBAAN,GAAA,IAAA,CAAA,QAA6C,CAA7C,qBAAA,CAAA;QAEA,IAAM,qBAAoB,GAA1B,IAAA,CAAkC,QAAlC,CAAA,qBAAA,CAAA;QACA,IAAA,mBAAA,GAAA,IAAA,CAAA,QAAA,CAAA,mBAAA,CAAA;QACA,qBAAA,CAAA,OAAA,CAAA,UAAA,QAAA,EAAA,GAAA,EAAA;YAEA,IAAQ,QAAR,GAAA,KAAA,CAAyB,kBAAzB,CAAA,QAAA,CAAA,CAAA;YACA,IAAQ,QAAR,GAAA,qBAAA,CAAA,GAAA,CAA6C,CAAC;YAC9C,IAAA,CAAAG,6BAAA,CAAA,QAAA,EAAA,QAAA,CAAA,EAAA;gBACA,IAAA,UAAA,GAAA,mBAAA,CAAA,QAAA,CAAA,CAAA;gBACA,IAAA,YAAA,GAAA,KAAA,CAAA,UAAA,CAAA,CAAA;gBAEA,YAAA,CAAA,IAAA,CAAA,QAAa,CAAb,CAAA;gBACA,qBAAA,CAAA,GAAA,CAAA,GAAA,QAAiD,CAAjD;aACA;SACK,CAAL,CAAA;KACA,CAAA;IACA,gBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;QACA,IAAA,UAAA,CAAA,IAAA,CAAA,wBAAA,CAAA,EAAA;YACQ,IAAR,CAAA,wBAAA,EAAA,CAAA;SACA;QAEA,IAAA,IAAA,CAAA,kBAAA,IAAA,UAAA,CAAA,IAAA,CAAA,kBAAA,CAAA,UAAA,CAAA,EAAA;YACU,IAAV,CAAA,kBAAA,CAAA,UAAA,EAAoE,CAApE;SACA;QACA,IAAM,CAAN,eAAsB,CAAtB,QAAA,EAAA,CAAA;KACA,CAAA;IACA,gBAAA,CAAmB,SAAnB,CAAA,YAAA,GAAA,UAAA,IAAA,EAAA;QACI,IAAI,UAAU,GAAlB,IAAyB,CAAzB,SAAA,CAAA,GAAA,CAAA,IAAA,GAAA,WAAA,CAAA,CAAA;QAAA,IAA2B,UAA3B,CAAA,MAA4C,GAA5C,CAAA,EAAA;YACQ,MAAR,IAAkB,KAAlB,CAAA,gDAAA,GAAA,IAAA,CAAA,IAAA,CAAA,CAAA;SAAA;QACI,IAAI,SAAS,GAAjB,UAAA,CAAA,CAAA,CAAA,CAAA;QAAA,IAA2B,SAA3B,CAAA,OAA4C;YAClC,IAAI,CAAd,YAA2B,CAA3B,SAAA,CAAA,CAAA;;YAEQ,IAAR,CAAA,YAAA,CAAA,UAAA,CAAA,CAAA;QACA,IAAM,SAAsC,CAA5C,OAAA;YAAA,IAAkD,CAAlD,YAAA,CAAA,SAAA,CAAA,CAAA;QACA,IAAA,IAAA,GAAA,SAAA,CAAA,IAAA,CAAA;;QAEA,IAAA,OAAA,IAAA,IAAA,QAAA,EAAA;YAEA,IAAA,IAAA,CAAA,IAAA;gBACA,IAAA,CAAA,YAAA,CAAA,WAAA,CAAA,CAAA;SAEA;QACA,OAAA,SAAkB,CAAlB;KACA,CAAA;IACA,gBAAc,CAAd,SAAA,CAAA,mBAAA,GAAA,UAAA,SAAA,EAAA;QACA,IAAA,OAAA,GAAA,SAAA,CAA0B,OAA1B,KAAA,SAAA,CAAA,UAAA,IAAA,SAAA,CAAA,IAAA,CAAA,CAAA;QAEA,IAAA,KAAA,CAAA,OAAiB,CAAjB,EAAA;YACA,MAAA,CAAA,IAAA,CAAA,OAAqB,CAAC,CAAtB,OAA8B,CAAC,UAA/B,GAAA,EAAA;gBACA,IAAA,KAAA,GAAA,OAAA,CAAA,GAAA,CAAA,CAAA;gBACA,IAAA,KAAA,GAAA,KAAA,CAAA,KAAA,CAAA,iBAAA,CAAA,CAAA;gBACA,IAAA,IAAA,GAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA;gBAEA,IAAA,CAAA,IAAA,EAAA;oBACA,OAAA,CAAA,GAAA,CAAA,GAAA,KAAA,CAAA,CAAA,CAAA,GAAA,GAAA,CAAA;iBAEA;aAAA,CAAA,CAAA;SACA;QACI,OAAJ,OAAA,CAAmB;KACnB,CAAA;IAEA,gBAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAA,SAAA,EAAA;QAEI,IAAM,KAAV,GAAA,IAAA,CAAA;QACI,IAAM,WAAW,GAArB,OAAA,SAAA,CAAA,gBAAA,KAAA,QAAA,CAAA;QAEI,IAAI,WAAR,IAAA,MAAA,CAAA,IAAkC,CAAlC,SAAA,CAAA,KAAA,CAAA,CAAA,MAAA,EAAA;YACM,MAAM,IAAZ,KAAA,CAAA,gFAAA,CAAA,CAAA;SACA;QACA,IAAA,OAAA,GAAA,CAAA,WAA4B,IAA5B,SAAA,CAAA,gBAAA,GAAA,SAAA,CAAA,KAAA,CAAA;;QAIA,IAAA,OAAA,OAAA,IAAA,QAAA,EAAA;YACA,MAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,OAAA,CAAA,UAAA,QAAA,EAAA;gBACA,IAAU,UAAV,GAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;;;oBAIA,KAAA,GAAA,CAAA;oBACU,KAAK,GAAG;;;;wBAIN,MAAM;oBACR,KAAK,GAAG;wBACN,QAAQ,CAAC,qBAArB,CAAA,IAA+C,CAA/C,QAAA,CAAA,CAAA;wBACY,QAAQ,CAAC,qBAArB,CAAA,IAAA,CAAA,eAAA,CAAA,CAAA;wBACY,QAAZ,CAAA,mBAAA,CAAA,QAAA,CAAA,GAAA,QAAA,GAAA,QAAA,CAAA;wBACA,MAAA;oBACA,KAAA,GAAgB;wBACJ,QAAZ,CAAA,yBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAA;wBAEA,QAAA,CAAA,mBAAA,CAAA,QAAA,CAAA,GAAA,QAAA,CAAA;wBACA,MAAA;oBACA;wBAEoB,IAApB,IAAA,GAAA,IAAA,CAAA,SAAA,CAAA,OAAA,CAAA,CAAA;wBACA,MAAA,IAAA,KAAA,CAAA,sBAAA,GAAA,WAAA,GAAA,QAAA,GAAA,IAAA,GAAA,QAAA,GAAA,KAAA,CAAA,IAAA,GAAA,cAAA,CAAA,CAAA;iBAEA;aACA,CAAA,CAAA;SACA;QAEI,OAAO,QAAX,CAAoB;KACpBD,CAAAA;IACA,gBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAA,UAAA,EAAA;QACA,IAAA,UAAA,GAAA,EAAA,CAAA;QAEI,IAAJ,SAAA,CAAA;QACA,OAAA,SAAA,GAAA,UAAA,CAAA,UAAA,EAAA;YAEA,UAAA,CAAA,WAAA,CAAA,SAAA,CAAA,CAAyB;YACjB,UAAR,CAAA,IAAuB,CAAvB,SAAA,CAAA,CAAA;SACA;QACA,OAAA,UAAA,CAAA;KAAA,CAAA;IACA,gBAAA,CAAA,SAAA,CAA2B,eAAe,GAA1C,UAAuD,SAAvD,EAAA;QACA,IAAM,IAAM,CAAZ,SAAA,CAAuB,QAAvB,KAAA,SAAA,EAAyD;YACnD,OAAN,IAAA,CAAA,WAAA,CAA8B,SAA9B,CAAA,IAAA,CAAA,SAAA,CAAA,QAAA,CAAA,CAAA,CAAA;SACA;aACO,IAAP,IAAA,CAAA,SAAA,CAAA,WAAA,EAAA;YAAA,IAAA,GAAA,GAAA,SAAA,CAAA,IAAA,CAAA,SAAA,CAAA,WAAA,CAAA,CAAA;YACA,IAAQ,IAAR,GAAA,IAAA,CAAA,cAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA;YAUA,IAAA,IAAA,KAAA,SAAA,EAAA;gBACA,OAAA,IAAA,CAAA,WAAA,CAAA,IAAA,CAAA,CAAA;aAAW;iBACX;gBACA,MAAA,IAAA,KAAA,CAAA,6DAAA,CAAA,CAAA;aACA;SAEA;;;SAKA;KACA,CAAA;IACA,gBAAA,CAAiB,SAAjB,CAAA,eAAA,GAAA,UAAA,cAAA,EAAA,MAAA,EAAA,QAAA,EAAA,YAAA,EAAA;;;QAIA,IAAA,MAAA,GAAA,EAAA,QAAA,EAAA,MAAA,EAAA,UAAA,EAAA,QAAA,EAAA,CAAA;QAAE,IAAF,UAAA,GAyCG,IAzCH,CAAA,WAAA,CAAA,cAAA,EAAA,MAAA,EAAA,IAAA,EAAA,YAAA,CAAA,CAAA;QAGI,QAAJ,CAAA,IAAA,CAAkB,aAAlB,CAAA,IAAA,CAAA,SAAA,CAAA,IAAA,CAAA,EAAA,UAAA,CAAA,CAAA;QACA,OAAA,UAAA,CAAA;KACA,CAAA;IAAA,gBAAA,CAAA,SAA4B,CAAC,cAA7B,GAAA,UAAA,aAAA,EAAA,QAAA,EAAA,OAAA,EAAA;QACA,IAAM,KAAN,GAAA,IAAA,CAAA;QACA,IAAA,CAAA,OAAA,EAAA;YAAA,OAAA,IAAA,CAAsB;SACtB;aAEA,IAAA,KAAA,CAAiB,OAAjB,CAAyB,OAAzB,CAAA,EACU;YAEJ,OAAO,OAAK,CAAC,GAAnB,CAAA,UAAA,GAAA,EAAA,EAAA,OAAA,KAAA,CAAA,cAAA,CAAA,aAAA,EAAA,QAAA,EAAA,GAAA,CAAA,CAAA,EAAA,CAAA,CAAA;SACK;aAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YACtC,IAAM,OAAZ,GAAA,EAAA,CAAA;YACM,MAAN,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,OAAA,CAAA,UAA+C,GAA/C,EAAA,EAAA,OAAA,OAAA,CAAA,GAAA,CAAA,GAAA,KAAA,CAAA,cAAA,CAAA,aAAA,EAAA,QAAA,EAAA,OAAA,CAAA,GAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA;YAEM,OAAN,OAAA,CAAA;SACA;aACA,IAAA,OAAA,OAAA,KAAA,QAAA,EAA0C;YACpC,IAAM,KAAZ,GAAA,OAAA,CAA4B,KAA5B,CAAA,iBAAA,CAAA,CAAA;YAEM,IAAM,WAAZ,GAAA,KAAA,CAAA,CAAA,CAAA,IAAA,KAAyC,CAAC,CAA1C,CAAA,CAAA;YAEM,IAAI,MAAV,GAAA,OAAA,CAAA,SAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA;YACA,IAAQ,UAAR,GAAA,CAAA,CAAA,KAA4B,CAA5B,CAAA,CAAA,CAAA;YACA,IAAA,aAAA,GAAA,CAAA,CAAA,WAAA,CAAA;YAEM,IAAM,aAAZ,GAAA,WAAA,KAA4C,IAA5C,CAAA;YAEM,IAAI,OAAV,GAAoB,aAAa,CAAjC,MAAA,CAAA,CAAA;YACA,IAAQ,aAAR,EAAuB;gBAEvB,QAAA,GAAA,QAAA,CAAA,MAAA,EAAA,CAAA;aAEA;YACA,IAAA,KAAA,GAAA,aAAA,GAAA,QAAA,CAAA,aAAA,CAAA,OAAA,CAAA,GAAA,QAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA;YAAA,IAAA,CAAA,KAAA,IAAA,CAAA,UAAA,EAAA;gBACA,MAAgB,IAAhB,KAAA,CAAA,2BAAA,GAAA,OAAA,GAAA,2BAAA,GAAA,aAC4F,GAD5F,IAAA,CAAA,CAAA;aAEA;YACA,OAAA,KAAA,CAAA;SAEA;aAAA;;SAEA;KACA,CAAA;IACA,gBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,YAAA;QACA,IAAW,KAAY,GAAvB,IAAA,CAAA;;QAEA,IAAA,CAAA,QAAA,CAAA,qBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,QAAA,CAAA,yBAAA,CAAA;aAEA,OAAA,CAAA,UAAA,QAAA,EAAA;YAAA,IAAA,UAAA,GAAA,KAAA,CAAA,QAAA,CAAA,mBAAA,CAAA,QAAA,CAAA,CAAA;;SAEA,CAAA,CAAA;KACA,CAAA;IACA,gBAAA,CAAA,SAAA,CAAmC,WAAW,GAA9C,YAAA;QAEA,IAAM,KAAI,GAAV,IAAA,CAAA;;QAEA,IAAA,CAAA,QAAA,CAAA,yBAAA,CAAA,OAAA,CAAA,UAAA,QAAA,EAAA;YAEA,IAAA,UAAA,GAAA,KAAA,CAAA,QAAA,CAAA,mBAAA,CAAA,QAAA,CAAA,CAAA;YAAA,IAAA,OAAA,GAAA,KAAA,CAAA,UAAA,CAAA,CAAA;;SAEA,CAAA,CAAA;KAGA,CAAA;IACA,gBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAA,OAAA,EAAA;QACA,IAAA,KAAA,GAAA,IAAA,CAAA;;QAGA,MAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,OAAA,CAAA,UAAA,QAAA,EAAA,EAAA,OAAA,KAAA,CAAA,kBAAA,CAAA,QAAA,CAAA,GAAA,OAAA,CAAA,QAAA,CAAA,CAAA,YAAA,CAAA,EAAA,CAAA,CAAA;QACI,IAAJ,UAAA,CAAmB,IAAnB,CAAA,kBAAA,CAAA,UAAA,CACwC,EADxC;YAEA,IAAA,CAAA,kBAAA,CAAA,UAAA,CAAA,OAAA,CAAA,CAAA;SAEA;KACA,CAAA;IACA,gBAAgB,CAAhB,SAAA,CAAA,YAAA,GAAA,UAAA,OAAA,EAAA;QACA,MAAA,IAAA,KAAA,CAAA,sBAAA,GAAA,IAAA,CAAA,IAAA,GAAA,mCAAA,GAAA,OAAA,GAAA,IAAA,CAAA,CAAA;KACA,CAAA;IAAA,gBA9XA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAA,IAAA,EA8XA;QAGA,IAAA,CAAA,OAAA,CAAA,SAAA,GAAA,IAAA,CAAA;QACA,OAAA,IAAA,CAAA,QAAA,CAAA,IAAA,CAAgC,OAAhC,CAAwC,UAAxC,CAAA,CAAA;KACA,CAAA;IAEA,OAAA,gBAAA,CAAA;CACA,EAAA,CAAE,CAAF;AACA,SAAA,SAAA,CAAA,QAAA,EAAA;;CAGA;AACA,SAAA,UAAA,CAAkB,KAAlB,EAAA;IACA,OAAA,OAAA,KAAA,KAAA,UAAA,CAAA;;;;;;;;;;;;;;;;;AD3cA,IAAE,eAA2C,CAA7C;AACA,SAAA,kBAAA,CAAA,QAAA,EAAA;IACE,eAAe,GAAjB,QAAA,CAAA;CACC;AAED,SAAA,eAAA,GAAA;IACE,IAAF,QAAc,GAAd,eAAA,CAAA;IACA,eAAA,GAAA,IAAA,CAAA;IAEA,OAAA,QAAA,CAAA;CACA;AACA,SAAA,gBAAA,CAAA,CAAA,EAAA;IAEA,OAAA,CAAA,CAAA,GAAA,CAAA,YAAA,CAAA,CAAA;CACA;AACA,SAAA,cAAA,CAAA,CAAA,EAAA;IAEa,OAAb,CAAA,CAAA,GAAA,CAAA,UAAA,CAAA,CAAA;;;;;AAKA,IAAE,iBAAF,GAAA;;;;;;IDzCA,EAAA,OAAA,EAAA,YAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,CAAA,WAAA,CAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+IA,IAAA,aAAA,IAAA,YAAA;IAAA,SAAA,aAAA;;QAEA,QAAA;;;;;;;;;;;;IAaA,aAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAEoC,UAFpC,EAAA,OAAA,EAAA,MAAA,sCAAA;QAIA,IAAA,KAAA,GAAA,IAAA,CAAA;QAEA,IAAA,OAAmB,KAAnB,KAAA,CAAA,EAAA;YAAA,OAAA,GAAA,EAAA,CAAA;SAAA;QACA,IAAc,gBAAd,GAAiC,mBAAjC,GAAA,OAAA,CAAA;;QAEA,IAAA,UAAA,GAAA,QAAiC,CAAC,gBAAgB,EAAlD,EAAA,CAAA;aACA,KAAA,CAAA,YAAA,EAAA,IAAA,CAAoC,QAApC,CAAA;aACA,MAAA,CAAA;YACA,QAAA,EAAA,SAAA;YACA,UAAA,QAAA,EAA4B,SAA5B,EAAA;gBACA,IAAA,SAAA,CAAA,GAAA,CAAA,aAAA,CAA2C,EAA3C;;wBAEA,SAAA;wBACA,UAAA,mBAAA,EAAA;4BACA,IAAA,kBAAA,GAAA,mBAAA,CAAA,UAAwF,CAAxF;4BACA,IAAA,QAA8B,GAA9B,KAAA,CAAA,QAAA,CAAA;;4BAEA,IAAA,aAAA,GAAA,UAAA,QAAA,EAAA;gCAAA,kBAAA,CAAA,IAAA,CAAA,mBAAA,EAAA,YAAA;oCACA,IAA4B,cAAc,GAA1C,QAAqD,CACrB,GADhC,CAAAD,yBAAA,CAAA,CAAA;oCAEA,IAAA,cAAA,CAAA,QAAA,EAAA,EAAA;wCACA,QAAA,EAAA,CAAA;qCACA;yCAEA;wCACA,cAAgD,CAAC,UAAjD,CAAA,aAAA,CAAA,IAAA,CAAA,mBAAA,EAAA,QAAA,CAAA,CAAA,CAAA;qCACA;iCACA,CAAA,CAAA;6BACA,CAAA;4BACA,mBAAA,CAAA,UAAA,GAAA,aAAA,CAAA;4BACA,OAAA,mBAAA,CAAA;yBAEA;qBACuB,CAAvB,CAAA;iBACA;aACA;;aAGA,GAAgB,CAAhB;YACA,SAAoB;;gBAGJD,KAAhBA,CAAAA,SAAAA,GAAuC,SAAvCA,CAAAA;;;;;gBAMA,OAAA,CAAwB,UAAU,CAAlC,CAAA,IAAA,CAAA,aAAA,CAAA,YAAA,CAAA,EAAA,KAAA,CAAA,QAAA,CAAA,CAAA;;;;gBAKA,UAAA,CAAA,YAAA;oBACA,IAAA,UAAA,GAAA,SAAA,CAAA,GAAA,CAAA,YAAA,CAAA,CAAA;oBAEA,IAAA,YAAwC,GAAxC,KAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,SAAA,CAAA,YAAA,EAAiG,OAAjG,UAAA,CAAA,OAAA,EAAA,CAAA,EAAA,CAAA,CAAA;;iBAGA,EAAA,CAAA,CAAA,CAAA;aACA;;QAGI,IAAI,aAAR,GAAA,QAAA,CAAA,mBAAA,EAAqD,CAArD,gBAAsE,CAAtE,CAAA,MAAA,CAAA,OAAA,CAAuF,CAAC,CAAC;;QAGrF,IAAI,aAAa,GAArB,MAAA,mBAAA,SAAA,CAAA,CAAA;QACA,aAAA,CAAA,eAAA,GAAA,SAAA,CAAA;;QAEA,IAAM,CAAN,MAAA,CAAA,GAAA,CAAA,YAAA,EAAA,SAAA,CAAA,UAAA,EAAA,CAAA,aAAA,CAAA,IAAA,CAAA,EAAA,MAAA,CAAA,CAAA,EAAA,CAAA,CAAA;;QACA,IAAA,aAAA,CAAA,eAAA,EAAA;YACA,IAAQ,yBAAR,GAAA,aAAA,CAAA,eAA+D,CAAC;YAChE,IAAQ,QAAM,GAAd,IAAA,CAAA,MAAA,CAAA;YACA,aAAA,CAAA,eAAA,GAAA,YAAA;gBACA,IAAA,KAAA,GAAA,IAAA,CAAA;gBACA,IAAA,IAAA,GAAA,SAAA,CAAA;gBASA,aAAA,CAAA,eAAA,GAAA,yBAAA,CAAA;gBAnHA,QAAA,CAAA,GAAA,CAAA,YAAA,EAAA,aAAA,CAAA,eAAA,CAAA,KAAA,CAAA,KAAA,EAAA,IAAA,CAAA,CAAA,EAAA,CAAA,CAAA;aA2GA,CAAA;SACA;KACA,CAAA;;CAEA,EAAA,CAAA,CAAA;AACA,aAAA,CAAA,UAAA,GAAA;IACA,EAAC,IAAI,EAAED,sBAAP,EAAA,IAAA,EAAA,CAAA,EAAA,SAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,EAAA,EAAA;CACC,CAAD;;AAIA,aAAA,CAAA,cAAA,GAAsB,YAAtB;IAAA,OAAA;QAAA,EAAA,IAAA,EAAAD,sBAAA,GAAA;QAAA,EAAA,IAAA,EAAAD,oBAAA,GAAA;;;;;;KAMA;;;;;IAMA,iBAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAA,KAAA,EAAA,aAAA,EAAA;QACA,IAAA,aAAA,KAAAD,oDAAA,EAAA;YAdA,OAAA,aAAA,CAAA;;QDxPA,OAAA,IAAA,CAAA,WAAA,CAAA,GAAA,CAAA,KAAA,EAAA,aAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;"}